AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
      - Label:
          default: EKS Configuration
        Parameters:
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      KeyPairName:
        default: SSH Key Name
      NodeAMIOS:
        default: Node AMI Operating System
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      NodeInstanceType:
        default: Nodes Instance Type
      NumberOfNodes:
        default: Number of Nodes
      MaxNumberOfNodes:
        default: Maximum number of Nodes
      NodeGroupName:
        default: Node Group Name
      NodeVolumeSize:
        default: Node Volume Size
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
  AWSAMIRegionMap:
    Filters:
      AMZNEKS114:
        name: 'amazon-eks-node-1.14-v20??????'
        owner-id: '602401143452'
      AMZNEKS114GPU:
        name: 'amazon-eks-gpu-node-1.14-v20??????'
        owner-id: '602401143452'
      AMZNEKS113:
        name: 'amazon-eks-node-1.13-v20??????'
        owner-id: '602401143452'
      AMZNEKS113GPU:
        name: 'amazon-eks-gpu-node-1.13-v20??????'
        owner-id: '602401143452'
      AMZNEKS112:
        name: 'amazon-eks-node-1.12-v20??????'
        owner-id: '602401143452'
      AMZNEKS112GPU:
        name: 'amazon-eks-gpu-node-1.12-v20??????'
        owner-id: '602401143452'
      SLES15EKS114:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
      SLES15EKS114GPU:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
      SLES15EKS113:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
      SLES15EKS113GPU:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
      SLES15EKS112:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
      SLES15EKS112GPU:
        name: 'suse-sles-15-v20??????-hvm-ssd-x86_64'
        owner-id: '013907871322'
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
    Default: ""
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  CleanupSecurityGroupDependenciesLambdaArn:
    Description: ARN for CleanupSecurityGroupDependencies lambda function
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  NodeInstanceProfile:
    Type: String
  NodeInstanceRoleName:
    Type: String
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.14", "1.13", "1.12" ]
    Default: "1.14"
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  CustomAmiId:
    Type: String
    Default: ""
  HttpProxy:
    Type: String
    Default: ""
  KubeManifestLambdaArn:
    Type: String
    Default: ""
  KubeConfigPath:
    Type: String
    Default: ""
  KubeConfigKmsContext:
    Type: String
    Default: ""
Conditions:
  EnableProxy: !Not [!Equals [!Ref HttpProxy, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
  UseCustomAmi: !Not [ !Equals [ !Ref CustomAmiId, "" ] ]
  CleanupSGs:
    !Not [ !Equals [ !Ref CleanupSecurityGroupDependenciesLambdaArn, "" ] ]
Mappings:
  K8sVersionMap:
    "1.12":
      BinaryPath: 1.12.10/2019-08-14/bin/linux/amd64
      STD: EKS112
      GPU: EKS112GPU
    "1.13":
      BinaryPath: 1.13.8/2019-08-14/bin/linux/amd64
      STD: EKS113
      GPU: EKS113GPU
    "1.14":
      BinaryPath: 1.14.6/2019-08-22/bin/linux/amd64
      STD: EKS114
      GPU: EKS114GPU
  InstanceTypes:
    t2.small: { Type: STD }
    t2.medium: { Type: STD }
    t2.large: { Type: STD }
    t2.xlarge: { Type: STD }
    t2.2xlarge: { Type: STD }
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m3.medium: { Type: STD }
    m3.large: { Type: STD }
    m3.xlarge: { Type: STD }
    m3.2xlarge: { Type: STD }
    m4.large: { Type: STD }
    m4.xlarge: { Type: STD }
    m4.2xlarge: { Type: STD }
    m4.4xlarge: { Type: STD }
    m4.10xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c4.large: { Type: STD }
    c4.xlarge: { Type: STD }
    c4.2xlarge: { Type: STD }
    c4.4xlarge: { Type: STD }
    c4.8xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    r3.xlarge: { Type: STD }
    r3.2xlarge: { Type: STD }
    r3.4xlarge: { Type: STD }
    r3.8xlarge: { Type: STD }
    r4.large: { Type: STD }
    r4.xlarge: { Type: STD }
    r4.2xlarge: { Type: STD }
    r4.4xlarge: { Type: STD }
    r4.8xlarge: { Type: STD }
    r4.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p2.xlarge: { Type: GPU }
    p2.8xlarge: { Type: GPU }
    p2.16xlarge: { Type: GPU }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS112: AMZNEKS112
      EKS112GPU: AMZNEKS112GPU
      EKS113: AMZNEKS113
      EKS113GPU: AMZNEKS113GPU
      EKS114: AMZNEKS114
      EKS114GPU: AMZNEKS114GPU
    SUSE-SLES-15-HVM:
      EKS112: SLES15EKS112
      EKS112GPU: SLES15EKS112GPU
      EKS113: SLES15EKS113
      EKS113GPU: SLES15EKS113GPU
      EKS114: SLES15EKS114
      EKS114GPU: SLES15EKS114GPU
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS114: ami-066b5e6ba23a92d02
      AMZNEKS114GPU: ami-0f4897ab08cfbc121
      AMZNEKS113: ami-0c82adb489c1ca5a1
      AMZNEKS113GPU: ami-076913e4fa2ccd62d
      AMZNEKS112: ami-09297118e111bbba7
      AMZNEKS112GPU: ami-02c4b0fd503a4b5d9
      SLES15EKS114: ami-056ac8ad44e6a7e1f
      SLES15EKS114GPU: ami-056ac8ad44e6a7e1f
      SLES15EKS113: ami-056ac8ad44e6a7e1f
      SLES15EKS113GPU: ami-056ac8ad44e6a7e1f
      SLES15EKS112: ami-056ac8ad44e6a7e1f
      SLES15EKS112GPU: ami-056ac8ad44e6a7e1f
    ap-northeast-2:
      AMZNEKS114: ami-0ab14fe077e2091c3
      AMZNEKS114GPU: ami-0f644c9a3560385a2
      AMZNEKS113: ami-067c8ce56d56c224c
      AMZNEKS113GPU: ami-0f5b6af7eae9bc729
      AMZNEKS112: ami-0ac5769702faa6a07
      AMZNEKS112GPU: ami-09ccebd0e7e540e68
      SLES15EKS114: ami-0f81fff879bafe6b8
      SLES15EKS114GPU: ami-0f81fff879bafe6b8
      SLES15EKS113: ami-0f81fff879bafe6b8
      SLES15EKS113GPU: ami-0f81fff879bafe6b8
      SLES15EKS112: ami-0f81fff879bafe6b8
      SLES15EKS112GPU: ami-0f81fff879bafe6b8
    ap-south-1:
      AMZNEKS114: ami-000a47b17ec7fe1b6
      AMZNEKS114GPU: ami-0cbb1ff434c71e51d
      AMZNEKS113: ami-027530b82c18e83e6
      AMZNEKS113GPU: ami-097abfbabfd9c35c1
      AMZNEKS112: ami-0b7311d50ab8369c6
      AMZNEKS112GPU: ami-083e95bad0a75b52e
    ap-southeast-1:
      AMZNEKS114: ami-0d6bbb3973f07760c
      AMZNEKS114GPU: ami-0846817e3812d7476
      AMZNEKS113: ami-0f41a77b6691dead3
      AMZNEKS113GPU: ami-04b98d17de701318d
      AMZNEKS112: ami-00447ef78ac19fb0d
      AMZNEKS112GPU: ami-0434712aa283c3e96
      SLES15EKS114: ami-070356c21596ddc67
      SLES15EKS114GPU: ami-070356c21596ddc67
      SLES15EKS113: ami-070356c21596ddc67
      SLES15EKS113GPU: ami-070356c21596ddc67
      SLES15EKS112: ami-070356c21596ddc67
      SLES15EKS112GPU: ami-070356c21596ddc67
    ap-southeast-2:
      AMZNEKS114: ami-045a6a3aeb364fb67
      AMZNEKS114GPU: ami-04c3cbb3beeb03069
      AMZNEKS113: ami-0e15a94171934cbee
      AMZNEKS113GPU: ami-0c599e64df3809f6b
      AMZNEKS112: ami-07787220b554e203f
      AMZNEKS112GPU: ami-043dde34130bab4e6
      SLES15EKS114: ami-0c4245381c67efb39
      SLES15EKS114GPU: ami-0c4245381c67efb39
      SLES15EKS113: ami-0c4245381c67efb39
      SLES15EKS113GPU: ami-0c4245381c67efb39
      SLES15EKS112: ami-0c4245381c67efb39
      SLES15EKS112GPU: ami-0c4245381c67efb39
    ca-central-1:
      AMZNEKS114: ami-061a88523311c3ca1
      AMZNEKS114GPU: ami-0d813cffd048ace94
      AMZNEKS113: ami-0207f871d219b6b60
      AMZNEKS113GPU: ami-0d2a83338a2f90536
      AMZNEKS112: ami-08a9c2992da40e7f4
      AMZNEKS112GPU: ami-007eec39033793a21
      SLES15EKS114: ami-0c97d9b588207dad6
      SLES15EKS114GPU: ami-0c97d9b588207dad6
      SLES15EKS113: ami-0c97d9b588207dad6
      SLES15EKS113GPU: ami-0c97d9b588207dad6
      SLES15EKS112: ami-0c97d9b588207dad6
      SLES15EKS112GPU: ami-0c97d9b588207dad6
    eu-central-1:
      AMZNEKS114: ami-00c7ae6f974b43bbf
      AMZNEKS114GPU: ami-0c642e8032180b7c4
      AMZNEKS113: ami-093e1fa75e3bb68ce
      AMZNEKS113GPU: ami-00ec2185fab23426a
      AMZNEKS112: ami-0eab5b7c702e03e2b
      AMZNEKS112GPU: ami-01bfde2c916997715
      SLES15EKS114: ami-05dfd265ea534a3e9
      SLES15EKS114GPU: ami-05dfd265ea534a3e9
      SLES15EKS113: ami-05dfd265ea534a3e9
      SLES15EKS113GPU: ami-05dfd265ea534a3e9
      SLES15EKS112: ami-05dfd265ea534a3e9
      SLES15EKS112GPU: ami-05dfd265ea534a3e9
    eu-north-1:
      AMZNEKS114: ami-06a3737de26ab0515
      AMZNEKS114GPU: ami-02b5c56215e3842ea
      AMZNEKS113: ami-0b7ca973ac07f8595
      AMZNEKS113GPU: ami-00573ca2b35ff6524
      AMZNEKS112: ami-0adf3f066e49342ca
      AMZNEKS112GPU: ami-022e5ceb2f689d50e
      SLES15EKS114: ami-0741fa1a008af40ad
      SLES15EKS114GPU: ami-0741fa1a008af40ad
      SLES15EKS113: ami-0741fa1a008af40ad
      SLES15EKS113GPU: ami-0741fa1a008af40ad
      SLES15EKS112: ami-0741fa1a008af40ad
      SLES15EKS112GPU: ami-0741fa1a008af40ad
    eu-west-1:
      AMZNEKS114: ami-080af0c6edf8a81d7
      AMZNEKS114GPU: ami-0a2ec727fc5efaf94
      AMZNEKS113: ami-0054770ff8ce087d2
      AMZNEKS113GPU: ami-0e3f9cbea5d5d3487
      AMZNEKS112: ami-0cdc015fb374e5795
      AMZNEKS112GPU: ami-04ca04abc567e42ea
      SLES15EKS114: ami-0a58a1b152ba55f1d
      SLES15EKS114GPU: ami-0a58a1b152ba55f1d
      SLES15EKS113: ami-0a58a1b152ba55f1d
      SLES15EKS113GPU: ami-0a58a1b152ba55f1d
      SLES15EKS112: ami-0a58a1b152ba55f1d
      SLES15EKS112GPU: ami-0a58a1b152ba55f1d
    eu-west-2:
      AMZNEKS114: ami-08f0dda706daa3ef3
      AMZNEKS114GPU: ami-01507d3badfb6e74a
      AMZNEKS113: ami-00f12215c088fee09
      AMZNEKS113GPU: ami-02a1b66d51687da25
      AMZNEKS112: ami-02e8f857ea6cbaf8b
      AMZNEKS112GPU: ami-01c315620b9e0b423
      SLES15EKS114: ami-01497522185aaa4ee
      SLES15EKS114GPU: ami-01497522185aaa4ee
      SLES15EKS113: ami-01497522185aaa4ee
      SLES15EKS113GPU: ami-01497522185aaa4ee
      SLES15EKS112: ami-01497522185aaa4ee
      SLES15EKS112GPU: ami-01497522185aaa4ee
    eu-west-3:
      AMZNEKS114: ami-0af1bdb0929551a72
      AMZNEKS114GPU: ami-0fe18ee7ae64b3018
      AMZNEKS113: ami-09b5cf7bbf7cb84ba
      AMZNEKS113GPU: ami-05b169292ae745b40
      AMZNEKS112: ami-0f46e9df58970311a
      AMZNEKS112GPU: ami-089a0b9bcf348f7d6
      SLES15EKS114: ami-0f238bd4c6fdbefb0
      SLES15EKS114GPU: ami-0f238bd4c6fdbefb0
      SLES15EKS113: ami-0f238bd4c6fdbefb0
      SLES15EKS113GPU: ami-0f238bd4c6fdbefb0
      SLES15EKS112: ami-0f238bd4c6fdbefb0
      SLES15EKS112GPU: ami-0f238bd4c6fdbefb0
    sa-east-1:
      AMZNEKS114: ami-0ac44db2500c8afe1
      AMZNEKS114GPU: ami-08f3871efd392ee5f
      AMZNEKS113: ami-0689f244c41608a9a
      AMZNEKS113GPU: ami-06ee2ccfb51362c8b
      AMZNEKS112: ami-00b1a7a61ba6691ef
      AMZNEKS112GPU: ami-0faa86e9697740353
      SLES15EKS114: ami-0772af912976aa692
      SLES15EKS114GPU: ami-0772af912976aa692
      SLES15EKS113: ami-0772af912976aa692
      SLES15EKS113GPU: ami-0772af912976aa692
      SLES15EKS112: ami-0772af912976aa692
      SLES15EKS112GPU: ami-0772af912976aa692  
    us-east-1:
      AMZNEKS114: ami-0bf3e2c598f50ba82
      AMZNEKS114GPU: ami-031814549a4b2892c
      AMZNEKS113: ami-01e46a44488cc64aa
      AMZNEKS113GPU: ami-05c6f24f319ac8479
      AMZNEKS112: ami-0d2abcf4f045376da
      AMZNEKS112GPU: ami-05323e1c235abebed
      SLES15EKS114: ami-0b1764f3d7d2e2316
      SLES15EKS114GPU: ami-0b1764f3d7d2e2316
      SLES15EKS113: ami-0b1764f3d7d2e2316
      SLES15EKS113GPU: ami-0b1764f3d7d2e2316
      SLES15EKS112: ami-0b1764f3d7d2e2316
      SLES15EKS112GPU: ami-0b1764f3d7d2e2316
    us-east-2:
      AMZNEKS114: ami-074f0e3f73e526e8c
      AMZNEKS114GPU: ami-0e4458dd9c6ab2d9c
      AMZNEKS113: ami-083aa671736b7a07c
      AMZNEKS113GPU: ami-08359147a49e80726
      AMZNEKS112: ami-016778d1152394165
      AMZNEKS112GPU: ami-0fa78f22a797670ab
      SLES15EKS114: ami-05ea824317ffc0c20
      SLES15EKS114GPU: ami-05ea824317ffc0c20
      SLES15EKS113: ami-05ea824317ffc0c20
      SLES15EKS113GPU: ami-05ea824317ffc0c20
      SLES15EKS112: ami-05ea824317ffc0c20
      SLES15EKS112GPU: ami-05ea824317ffc0c20
    us-west-2:
      AMZNEKS114: ami-08d5d1a25493f6a71
      AMZNEKS114GPU: ami-006e16470e13ca428
      AMZNEKS113: ami-0da43d732a994f37a
      AMZNEKS113GPU: ami-0fce4677725ab457a
      AMZNEKS112: ami-08d3303b913b309b2
      AMZNEKS112GPU: ami-0d1ae2749d571bd76
      SLES15EKS114: ami-0f1e3b3fb0fec0361
      SLES15EKS114GPU: ami-0f1e3b3fb0fec0361
      SLES15EKS113: ami-0f1e3b3fb0fec0361
      SLES15EKS113GPU: ami-0f1e3b3fb0fec0361
      SLES15EKS112: ami-0f1e3b3fb0fec0361
      SLES15EKS112GPU: ami-0f1e3b3fb0fec0361
Resources:
  CleanupSecurityGroupDependencies:
    Condition: CleanupSGs
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !Ref CleanupSecurityGroupDependenciesLambdaArn
      SecurityGroups: [!Ref NodeSecurityGroup]
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeGroup:
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
      DependsOn2: !If [ EnableProxy, !Ref ConfigureProxy, !Ref "AWS::NoValue" ]
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: !If
        - 3AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
        - !If
          - 2AZDeployment
          - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
          - [ !Ref PrivateSubnet1ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
        - Key: !Sub 'k8s.io/cluster-autoscaler/${EKSControlPlane}'
          Value: ''
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  ConfigureProxy:
    Condition: EnableProxy
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      HttpProxy: !Ref HttpProxy
      VpcId: !Ref VPCID
  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/install-worker.sh
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - UseCustomAmi
        - !Ref CustomAmiId
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - !FindInMap
            - OStoK8sVersionMap
            - !Ref NodeAMIOS
            - !FindInMap
              - K8sVersionMap
              - !Ref KubernetesVersion
              - !FindInMap
                - InstanceTypes
                - !Ref NodeInstanceType
                - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            set -o xtrace
            function signal() {
              $1/cfn-signal --exit-code $2 \
                --stack  ${AWS::StackName} \
                --resource NodeGroup  \
                --region ${AWS::Region}
            }
            ${ProxySetup}
            ${BootStrap}
            ${ProxyPostSetup}
            ${Signal}
          - ProxySetup: !If
              - EnableProxy
              - !Sub |
                  MAC=$(curl -s http://169.254.169.254/latest/meta-data/mac/)
                  VPCCIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks | xargs | tr ' ' ',')
                  cat <<EOF >> /etc/environment
                  HTTP_PROXY=${HttpProxy}
                  HTTPS_PROXY=${HttpProxy}
                  http_proxy=${HttpProxy}
                  https_proxy=${HttpProxy}
                  no_proxy=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  NO_PROXY=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  EOF
                  set -a
                  source /etc/environment
              - ""
            ProxyPostSetup: !If
              - EnableProxy
              - |
                  mkdir -p /etc/systemd/system/docker.service.d
                  cat <<EOF >> /etc/systemd/system/docker.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  cat <<EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  systemctl daemon-reload
                  systemctl enable --now --no-block docker
                  systemctl restart docker
                  systemctl restart kubelet
              - ""
            Signal: !If
              - AmznOS
              - |
                  signal /opt/aws/bin $?
              - |
                  signal /usr/bin $?
                  if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                    # Need to enable some kernel boot options and reboot
                    sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                    grub2-mkconfig -o /boot/grub2/grub.cfg
                    reboot
                  fi
            BootStrap: !If
            - AmznOS
            - !Sub |
                /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments} || signal /opt/aws/bin $1
            - !Sub |
                if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                  zypper in -y python2-setuptools
                  update-alternatives --set easy_install /usr/bin/easy_install-2.7
                fi
                easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.zip
                /usr/bin/cfn-init \
                  --stack ${AWS::StackName} \
                  --resource NodeLaunchConfig \
                  --region ${AWS::Region}
Outputs:
  EKSNodeSecurityGroup:
    Value: !Ref NodeSecurityGroup
  NodeAutoScalingGroup:
    Value: !Ref NodeGroup