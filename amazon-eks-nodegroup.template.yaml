AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
      - Label:
          default: EKS Configuration
        Parameters:
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      KeyPairName:
        default: SSH Key Name
      NodeAMIOS:
        default: Node AMI Operating System
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      NodeInstanceType:
        default: Nodes Instance Type
      NumberOfNodes:
        default: Number of Nodes
      MaxNumberOfNodes:
        default: Maximum number of Nodes
      NodeGroupName:
        default: Node Group Name
      NodeVolumeSize:
        default: Node Volume Size
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the Workload (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the Workload (e.g.,
      subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the Workload (e.g.,
      subnet-b1f4a2cd)
    Type: AWS::EC2::Subnet::Id
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the Node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  NodeInstanceProfile:
    Type: String
  NodeInstanceRoleName:
    Type: String
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.12", "1.11", "1.10" ]
    Default: "1.12"
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Conditions:
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
Mappings:
  K8sVersionMap:
    "1.12":
      BinaryPath: 1.12.7/2019-03-27/bin/linux/amd64
      STD: EKS112
      GPU: EKS112GPU
    "1.11":
      BinaryPath: 1.11.9/2019-03-27/bin/linux/amd64
      STD: EKS111
      GPU: EKS111GPU
    "1.10":
      BinaryPath: 1.10.13/2019-03-27/bin/linux/amd64
      STD: EKS110
      GPU: EKS110GPU
  InstanceTypes:
    t2.small: { Type: STD }
    t2.medium: { Type: STD }
    t2.large: { Type: STD }
    t2.xlarge: { Type: STD }
    t2.2xlarge: { Type: STD }
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m3.medium: { Type: STD }
    m3.large: { Type: STD }
    m3.xlarge: { Type: STD }
    m3.2xlarge: { Type: STD }
    m4.large: { Type: STD }
    m4.xlarge: { Type: STD }
    m4.2xlarge: { Type: STD }
    m4.4xlarge: { Type: STD }
    m4.10xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c4.large: { Type: STD }
    c4.xlarge: { Type: STD }
    c4.2xlarge: { Type: STD }
    c4.4xlarge: { Type: STD }
    c4.8xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    r3.xlarge: { Type: STD }
    r3.2xlarge: { Type: STD }
    r3.4xlarge: { Type: STD }
    r3.8xlarge: { Type: STD }
    r4.large: { Type: STD }
    r4.xlarge: { Type: STD }
    r4.2xlarge: { Type: STD }
    r4.4xlarge: { Type: STD }
    r4.8xlarge: { Type: STD }
    r4.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p2.xlarge: { Type: GPU }
    p2.8xlarge: { Type: GPU }
    p2.16xlarge: { Type: GPU }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS112: AMZNEKS112
      EKS112GPU: AMZNEKS112GPU
      EKS111: AMZNEKS111
      EKS111GPU: AMZNEKS111GPU
      EKS110: AMZNEKS110
      EKS110GPU: AMZNEKS110GPU
    SUSE-SLES-15-HVM:
      EKS112: SLES15EKS112
      EKS112GPU: SLES15EKS112GPU
      EKS111: SLES15EKS111
      EKS111GPU: SLES15EKS111GPU
      EKS110: SLES15EKS110
      EKS110GPU: SLES15EKS110GPU
  AWSAMIRegionMap:
    AMI:
      AMZNEKS110: amazon-eks-node-1.10-v20
      AMZNEKS110GPU: amazon-eks-gpu-node-1.10-v20
      AMZNEKS111: amazon-eks-node-1.11-v20
      AMZNEKS111GPU: amazon-eks-gpu-node-1.11-v20
      AMZNEKS112: amazon-eks-node-1.12-v20
      AMZNEKS112GPU: amazon-eks-gpu-node-1.12-v20
      SLES15EKS110: suse-sles-15-v20
      SLES15EKS110GPU: suse-sles-15-v20
      SLES15EKS111: suse-sles-15-v20
      SLES15EKS111GPU: suse-sles-15-v20
      SLES15EKS112: suse-sles-15-v20
      SLES15EKS112GPU: suse-sles-15-v20
    ap-northeast-1:
      AMZNEKS110: ami-03369a2944c03ae53
      AMZNEKS110GPU: ami-073f06a1edd22ae2e
      AMZNEKS111: ami-02ce8113c735194cc
      AMZNEKS111GPU: ami-07fc636e8f6d3e18b
      AMZNEKS112: ami-074cb31c3b27144d4
      AMZNEKS112GPU: ami-08e41cc84f4b3f27f
      SLES15EKS110: ami-09161bc9964f46a98
      SLES15EKS110GPU: ami-09161bc9964f46a98
      SLES15EKS111: ami-09161bc9964f46a98
      SLES15EKS111GPU: ami-09161bc9964f46a98
      SLES15EKS112: ami-09161bc9964f46a98
      SLES15EKS112GPU: ami-09161bc9964f46a98
    ap-northeast-2:
      AMZNEKS110: ami-0ca1094d32581b205
      AMZNEKS110GPU: ami-0baff950f5217e54e
      AMZNEKS111: ami-0c7972077aa002104
      AMZNEKS111GPU: ami-002057772097fcef9
      AMZNEKS112: ami-079f4c4bc181015df
      AMZNEKS112GPU: ami-0c43b885e33fdc29e
      SLES15EKS110: ami-04ecb44b7d8e8d354
      SLES15EKS110GPU: ami-04ecb44b7d8e8d354
      SLES15EKS111: ami-04ecb44b7d8e8d354
      SLES15EKS111GPU: ami-04ecb44b7d8e8d354
      SLES15EKS112: ami-04ecb44b7d8e8d354
      SLES15EKS112GPU: ami-04ecb44b7d8e8d354
    ap-south-1:
      AMZNEKS110: ami-098f3355716dc7c52
      AMZNEKS110GPU: ami-033bd2c2a3431923e
      AMZNEKS111: ami-009648cf312f3b45b
      AMZNEKS111GPU: ami-04fe7f4c75aac7196
      AMZNEKS112: ami-0cbfa6ae8b7820648
      AMZNEKS112GPU: ami-0d3ecaf4f3318c714
    ap-southeast-1:
      AMZNEKS110: ami-08a61d1ed70bf3ba0
      AMZNEKS110GPU: ami-09defa93988984fa1
      AMZNEKS111: ami-096fafef94b361398
      AMZNEKS111GPU: ami-08d5da0b12751a31f
      AMZNEKS112: ami-0b320f92501448c3d
      AMZNEKS112GPU: ami-0655b4dbbe2d46703
      SLES15EKS110: ami-0920c364049458e86
      SLES15EKS110GPU: ami-0920c364049458e86
      SLES15EKS111: ami-0920c364049458e86
      SLES15EKS111GPU: ami-0920c364049458e86
      SLES15EKS112: ami-0920c364049458e86
      SLES15EKS112GPU: ami-0920c364049458e86
    ap-southeast-2:
      AMZNEKS110: ami-0dcfe3046280fa25a
      AMZNEKS110GPU: ami-00d9364d705e902c9
      AMZNEKS111: ami-05eeee15533223d5a
      AMZNEKS111GPU: ami-04024dd8e0b9e36ff
      AMZNEKS112: ami-06b5bb4c738fed87f
      AMZNEKS112GPU: ami-07079cd9ff1b312da
      SLES15EKS110: ami-05dff2fbe99ec205f
      SLES15EKS110GPU: ami-05dff2fbe99ec205f
      SLES15EKS111: ami-05dff2fbe99ec205f
      SLES15EKS111GPU: ami-05dff2fbe99ec205f
      SLES15EKS112: ami-05dff2fbe99ec205f
      SLES15EKS112GPU: ami-05dff2fbe99ec205f
    eu-central-1:
      AMZNEKS110: ami-06ea1cef40712a9bd
      AMZNEKS110GPU: ami-0a8536a894bd4ea06
      AMZNEKS111: ami-07c77043ca4cb9123
      AMZNEKS111GPU: ami-0bf09c13f4204ce9d
      AMZNEKS112: ami-094325c8eed41efa8
      AMZNEKS112GPU: ami-0c57db5b204001099
      SLES15EKS110: ami-0a1886cf45f944eb1
      SLES15EKS110GPU: ami-0a1886cf45f944eb1
      SLES15EKS111: ami-0a1886cf45f944eb1
      SLES15EKS111GPU: ami-0a1886cf45f944eb1
      SLES15EKS112: ami-0a1886cf45f944eb1
      SLES15EKS112GPU: ami-0a1886cf45f944eb1
    eu-north-1:
      AMZNEKS110: ami-0c80681b735cff50a
      AMZNEKS110GPU: ami-05baf7a6c293fe2ed
      AMZNEKS111: ami-059fed250df668dd2
      AMZNEKS111GPU: ami-0a1714bb5be631b59
      AMZNEKS112: ami-0db83844f3b515138
      AMZNEKS112GPU: ami-09354b076296f5946
      SLES15EKS110: ami-0c8b9b0a3c655a6a5
      SLES15EKS110GPU: ami-0c8b9b0a3c655a6a5
      SLES15EKS111: ami-0c8b9b0a3c655a6a5
      SLES15EKS111GPU: ami-0c8b9b0a3c655a6a5
      SLES15EKS112: ami-0c8b9b0a3c655a6a5
      SLES15EKS112GPU: ami-0c8b9b0a3c655a6a5
    eu-west-1:
      AMZNEKS110: ami-03baa6e9348518a1b
      AMZNEKS110GPU: ami-0f6f3929a9d7a418e
      AMZNEKS111: ami-08dbb8e69f6565a0b
      AMZNEKS111GPU: ami-0b4d0f56587640d5a
      AMZNEKS112: ami-0a55a9c72a7c212dd
      AMZNEKS112GPU: ami-0fbc930681258db86
      SLES15EKS110: ami-050889503ddaec473
      SLES15EKS110GPU: ami-050889503ddaec473
      SLES15EKS111: ami-050889503ddaec473
      SLES15EKS111GPU: ami-050889503ddaec473
      SLES15EKS112: ami-050889503ddaec473
      SLES15EKS112GPU: ami-050889503ddaec473
    eu-west-2:
      AMZNEKS110: ami-096f6e3e9e7a928bb
      AMZNEKS110GPU: ami-0a12396b818bc2383
      AMZNEKS111: ami-02a28cb577cff1b98
      AMZNEKS111GPU: ami-00e98f9e6fd2319e5
      AMZNEKS112: ami-0dad546eb1b5db222
      AMZNEKS112GPU: ami-0d832fced2cfe0f7b
      SLES15EKS110: ami-03369083fb3227e96
      SLES15EKS110GPU: ami-03369083fb3227e96
      SLES15EKS111: ami-03369083fb3227e96
      SLES15EKS111GPU: ami-03369083fb3227e96
      SLES15EKS112: ami-03369083fb3227e96
      SLES15EKS112GPU: ami-03369083fb3227e96
    eu-west-3:
      AMZNEKS110: ami-08a11cb1923d28574
      AMZNEKS110GPU: ami-086d5edcaacd0ccfd
      AMZNEKS111: ami-0810b9e54d8a7eb2f
      AMZNEKS111GPU: ami-0039e2556e6290828
      AMZNEKS112: ami-0dead7a5e30e976f5
      AMZNEKS112GPU: ami-0f8fa088b406ebba2
      SLES15EKS110: ami-05677c6482b0bc6e7
      SLES15EKS110GPU: ami-05677c6482b0bc6e7
      SLES15EKS111: ami-05677c6482b0bc6e7
      SLES15EKS111GPU: ami-05677c6482b0bc6e7
      SLES15EKS112: ami-05677c6482b0bc6e7
      SLES15EKS112GPU: ami-05677c6482b0bc6e7
    us-east-1:
      AMZNEKS110: ami-00c495fbee7666f8c
      AMZNEKS110GPU: ami-00f74c3728d4ca27d
      AMZNEKS111: ami-05fe3f841ac4df3bb
      AMZNEKS111GPU: ami-06ec2ea207616c078
      AMZNEKS112: ami-0d9f458329e942f90
      AMZNEKS112GPU: ami-0cb7959f92429410a
      SLES15EKS110: ami-06ea7729e394412c8
      SLES15EKS110GPU: ami-06ea7729e394412c8
      SLES15EKS111: ami-06ea7729e394412c8
      SLES15EKS111GPU: ami-06ea7729e394412c8
      SLES15EKS112: ami-06ea7729e394412c8
      SLES15EKS112GPU: ami-06ea7729e394412c8
    us-east-2:
      AMZNEKS110: ami-038743557a1f4a244
      AMZNEKS110GPU: ami-0a788defb66cdfffb
      AMZNEKS111: ami-06640f41bbd6653bb
      AMZNEKS111GPU: ami-0e6993a35aae3407b
      AMZNEKS112: ami-0e17dd7eeae729d78
      AMZNEKS112GPU: ami-0118b61dc2312dee2
      SLES15EKS110: ami-0eb9f58db22854f8f
      SLES15EKS110GPU: ami-0eb9f58db22854f8f
      SLES15EKS111: ami-0eb9f58db22854f8f
      SLES15EKS111GPU: ami-0eb9f58db22854f8f
      SLES15EKS112: ami-0eb9f58db22854f8f
      SLES15EKS112GPU: ami-0eb9f58db22854f8f
    us-west-2:
      AMZNEKS110: ami-023785df2ca7ef563
      AMZNEKS110GPU: ami-0901518d7557125c8
      AMZNEKS111: ami-0ed0fe5ff74520950
      AMZNEKS111GPU: ami-08377056d89909b2a
      AMZNEKS112: ami-0280ac619ed294a8a
      AMZNEKS112GPU: ami-0bebf2322fd52a42e
      SLES15EKS110: ami-0de02b68de6f5f732
      SLES15EKS110GPU: ami-0de02b68de6f5f732
      SLES15EKS111: ami-0de02b68de6f5f732
      SLES15EKS111GPU: ami-0de02b68de6f5f732
      SLES15EKS112: ami-0de02b68de6f5f732
      SLES15EKS112GPU: ami-0de02b68de6f5f732

Resources:
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !Ref QSS3BucketName
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/install-worker.sh
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - !FindInMap
          - OStoK8sVersionMap
          - !Ref NodeAMIOS
          - !FindInMap
            - K8sVersionMap
            - !Ref KubernetesVersion
            - !FindInMap
              - InstanceTypes
              - !Ref NodeInstanceType
              - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData: !If
        - AmznOS
        - Fn::Base64:
            !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                  --stack  ${AWS::StackName} \
                  --resource NodeGroup  \
                  --region ${AWS::Region}
        - Fn::Base64:
            !Sub |
            #!/bin/bash -e

            if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                zypper in -y python2-setuptools
                update-alternatives --set easy_install /usr/bin/easy_install-2.7
            fi

            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.zip
            /usr/bin/cfn-init \
                --stack ${AWS::StackName} \
                --resource NodeLaunchConfig \
                --region ${AWS::Region}
            /usr/bin/cfn-signal --exit-code $? \
                --stack ${AWS::StackName} \
                --resource NodeGroup \
                --region ${AWS::Region}
            if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                # Need to enable some kernel boot options and reboot
                sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                grub2-mkconfig -o /boot/grub2/grub.cfg
                reboot
            fi
Outputs:
  EKSNodeSecurityGroup:
    Value: !Ref NodeSecurityGroup
  NodeAutoScalingGroup:
    Value: !Ref NodeGroup
