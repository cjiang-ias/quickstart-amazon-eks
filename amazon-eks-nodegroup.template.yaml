AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
          - NodeInstanceProfile
          - NodeInstanceRoleName
          - NodeInstanceRoleArn
          - BootstrapArguments
          - HttpProxy
          - CustomAmiId
      - Label:
          default: EKS configuration
        Parameters:
          - EKSControlPlane
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - ManagedNodeGroupAMIType
          - ProvisionClusterAutoScaler
          - ControlPlaneSecurityGroup
          - KubernetesVersion
          - TargetGroupARNs
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
          - CleanupSecurityGroupDependenciesLambdaArn
          - NodeSGFunctionArn
    ParameterLabels:
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      KeyPairName:
        default: SSH key name
      NodeAMIOS:
        default: Node AMI operating system
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      EKSControlPlane:
        default: EKS cluster name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      MaxNumberOfNodes:
        default: Maximum number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      ManagedNodeGroupAMIType:
        default: Managed Node Group AMI type
      ProvisionClusterAutoScaler:
        default: Cluster autoscaler
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      CleanupSecurityGroupDependenciesLambdaArn:
        default: Cleanup Security Group dependencies Lambda ARN
      BootstrapArguments:
        default: Bootstrap arguments
      ControlPlaneSecurityGroup:
        default: Control plane Security Group
      NodeInstanceProfile:
        default: Node instance profile
      NodeInstanceRoleName:
        default: Node instance role name
      NodeInstanceRoleArn:
        default: Node instance role ARN
      KubernetesVersion:
        default: Kubernetes version
      CustomAmiId:
        default: Custom AMI id
      HttpProxy:
        default: HTTP proxy
      TargetGroupARNs:
        default: Target Group ARN's
      NodeSGFunctionArn:
        default: Node security group Lambda ARN
  AWSAMIRegionMap:
    Filters:
      AMZNEKS116:
        name: 'amazon-eks-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS116GPU:
        name: 'amazon-eks-gpu-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115:
        name: 'amazon-eks-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114:
        name: 'amazon-eks-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115GPU:
        name: 'amazon-eks-gpu-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114GPU:
        name: 'amazon-eks-gpu-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113:
        name: 'amazon-eks-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113GPU:
        name: 'amazon-eks-gpu-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      SLES15EKS115:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS115GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
  cfn-lint: { config: { ignore_checks: [W2030] } }
  LintSpellExclude:
    - Managed Node Group
    - files/bootstrap.sh
    - https://github.com/awslabs/amazon-eks-ami
    - autoscaler
    - Lambda
    - Security Group
    - Target Group
    - Kubernetes
    - Instance Profile
    - Role
    - Enabled
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the workload (e.g.,
      subnet-a0246123)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the workload (e.g.,
      subnet-b1f432cd)
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
    Default: ""
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  CleanupSecurityGroupDependenciesLambdaArn:
    Description: ARN for CleanupSecurityGroupDependencies lambda function
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5a.large
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.12xlarge
      - c5a.24xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.12xlarge
      - r5a.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes version 1.14 or higher.
    Type: String
  ManagedNodeGroupAMIType:
    Description: Select one of the two AMI types for your Managed Node Group (only applies if you selected Managed Node Group "yes". ).
      GPU instance types should use the AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux AMI with GPU support.
      Non-GPU instances should use the AL2_x86_64 AMI type, which uses the Amazon EKS-optimized Linux AMI.
    AllowedValues: [ "AL2_x86_64", " AL2_x86_64_GPU"]
    Default: "AL2_x86_64"
    Type: String
  MangedNodeGroupLabel:
    Description: Add a custom name label to the Managed Node Group Nodes. If you dont do this then a default one will be added for you.
    Type: String
    Default: ''
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami.
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EKS control plane EC2 Security Group
  NodeInstanceProfile:
    Type: String
    Description: ARN for IAM Instance Profile to attach to nodes
  NodeInstanceRoleName:
    Type: String
    Description: IAM Role name to attach to nodes
  NodeInstanceRoleArn:
    Type: String
    Description: IAM Role ARN to attach to nodes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.16", "1.15", "1.14", "1.13" ]
    Default: "1.16"
    Description: The Kubernetes control plane version.
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
    Description: "[OPTIONAL] List of Target Group ARN's to use with Managed Node Groups"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  CustomAmiId:
    Type: String
    Default: ""
    Description: "[OPTIONAL] If an AMI id is specified here it will be used in stead of the ami determined from the OS/region."
  HttpProxy:
    Type: String
    Default: ""
    Description: "[OPTIONAL] Specify the host name for an HTTP proxy to use for outbound internet access."
  NodeSGFunctionArn:
    Type: String
    Description: Function ARN to fetch node Security Group for managed node groups
  ProvisionClusterAutoScaler:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Disabled
    Description: Choose Enabled to enable Kubernetes cluster autoscaler.
Conditions:
  EnableProxy: !Not [!Equals [!Ref HttpProxy, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
  UseCustomAmi: !Not [ !Equals [ !Ref CustomAmiId, "" ] ]
  CleanupSGs: !Or
    - !Not [ !Equals [ !Ref CleanupSecurityGroupDependenciesLambdaArn, "" ] ]
    - !Equals [ !Ref 'ManagedNodeGroup', 'no' ]
  AutoScalerDisabled: !Equals [ !Ref 'ProvisionClusterAutoScaler', 'Disabled' ]
  DisableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup' , 'no' ]
  EnableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup', 'yes' ]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GreaterThan114: !Not
    - !Or
      - !Equals [ !Ref 'KubernetesVersion', '1.14' ]
      - !Equals [ !Ref 'KubernetesVersion', '1.13' ]
  MNGLBL: !Equals [ !Ref 'MangedNodeGroupLabel', '' ]
Mappings:
  K8sVersionMap:
    "1.13":
      BinaryPath: 1.13.8/2019-08-14/bin/linux/amd64
      STD: EKS113
      GPU: EKS113GPU
    "1.14":
      BinaryPath: 1.14.6/2019-08-22/bin/linux/amd64
      STD: EKS114
      GPU: EKS114GPU
    "1.15":
      BinaryPath: 1.15.10/2020-02-22/bin/linux/amd64
      STD: EKS115
      GPU: EKS115GPU
    "1.16":
      BinaryPath: 1.16.8/2020-04-16/bin/linux/amd64
      STD: EKS116
      GPU: EKS116GPU
  InstanceTypes:
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    t3a.nano: { Type: STD }
    t3a.micro: { Type: STD }
    t3a.small: { Type: STD }
    t3a.medium: { Type: STD }
    t3a.large: { Type: STD }
    t3a.xlarge: { Type: STD }
    t3a.2xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    m5a.large: { Type: STD }
    m5a.xlarge: { Type: STD }
    m5a.2xlarge: { Type: STD }
    m5a.4xlarge: { Type: STD }
    m5a.12xlarge: { Type: STD }
    m5a.24xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    c5a.large: { Type: STD }
    c5a.xlarge: { Type: STD }
    c5a.2xlarge: { Type: STD }
    c5a.4xlarge: { Type: STD }
    c5a.12xlarge: { Type: STD }
    c5a.24xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5a.large: { Type: STD }
    r5a.xlarge: { Type: STD }
    r5a.2xlarge: { Type: STD }
    r5a.4xlarge: { Type: STD }
    r5a.12xlarge: { Type: STD }
    r5a.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS113: AMZNEKS113
      EKS113GPU: AMZNEKS113GPU
      EKS114: AMZNEKS114
      EKS114GPU: AMZNEKS114GPU
      EKS115: AMZNEKS115
      EKS115GPU: AMZNEKS115GPU
      EKS116: AMZNEKS116
      EKS116GPU: AMZNEKS116GPU
    SUSE-SLES-15-HVM:
      EKS113: SLES15EKS113
      EKS113GPU: SLES15EKS113GPU
      EKS114: SLES15EKS114
      EKS114GPU: SLES15EKS114GPU
      EKS115: SLES15EKS115
      EKS115GPU: SLES15EKS115GPU
      EKS116: SLES15EKS116
      EKS116GPU: SLES15EKS116GPU
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS116: ami-0f3b1f2c30ccbc54d
      AMZNEKS116GPU: ami-08d351c41ac67428c
      AMZNEKS115: ami-075c959713eb62d73
      AMZNEKS115GPU: ami-0088a5acb36732dac
      AMZNEKS114: ami-05031a96a01199f39
      AMZNEKS114GPU: ami-08a21d2cd07743f80
      AMZNEKS113: ami-0eed1107b785489fb
      AMZNEKS113GPU: ami-05b2eefb127c5bb73
      SLES15EKS115: ami-03a50deb52dc85f6f
      SLES15EKS115GPU: ami-03a50deb52dc85f6f
      SLES15EKS114: ami-03a50deb52dc85f6f
      SLES15EKS114GPU: ami-03a50deb52dc85f6f
      SLES15EKS113: ami-03a50deb52dc85f6f
      SLES15EKS113GPU: ami-03a50deb52dc85f6f
    ap-northeast-2:
      AMZNEKS116: ami-0cbf8cc3b6e672e7a
      AMZNEKS116GPU: ami-0a23afd40bdfc2c13
      AMZNEKS115: ami-0e3151b82786ed92e
      AMZNEKS115GPU: ami-0741a0f5652f5b630
      SLES15EKS115: ami-04b0a659eb85132ef
      SLES15EKS115GPU: ami-04b0a659eb85132ef
      AMZNEKS114: ami-0d24ac0b01ade94bd
      AMZNEKS114GPU: ami-01248fd8baa54bdf8
      AMZNEKS113: ami-0ba66eb8ab69c7b7a
      AMZNEKS113GPU: ami-0bf7b3cca1266ca42
      SLES15EKS114: ami-04b0a659eb85132ef
      SLES15EKS114GPU: ami-04b0a659eb85132ef
      SLES15EKS113: ami-04b0a659eb85132ef
      SLES15EKS113GPU: ami-04b0a659eb85132ef
    ap-south-1:
      AMZNEKS116: ami-073969767527f7306
      AMZNEKS116GPU: ami-06c873aef183bc196
      AMZNEKS115: ami-05d4bdb1bb7492f49
      AMZNEKS115GPU: ami-042f52d6c43c2f32a
      SLES15EKS115: ami-026e9920feda96473
      SLES15EKS115GPU: ami-026e9920feda96473
      AMZNEKS114: ami-0f1fa995b9ce3e1bf
      AMZNEKS114GPU: ami-0a80491d8bf23f8b6
      AMZNEKS113: ami-0c07b1391ccaceff1
      AMZNEKS113GPU: ami-0871486f8d05fea33
      SLES15EKS114: ami-026e9920feda96473
      SLES15EKS114GPU: ami-026e9920feda96473
      SLES15EKS113: ami-026e9920feda96473
      SLES15EKS113GPU: ami-026e9920feda96473
    ap-southeast-1:
      AMZNEKS116: ami-0eca92b64847fff2a
      AMZNEKS116GPU: ami-0e56d924975847e06
      AMZNEKS115: ami-04edd2ab78af70c41
      AMZNEKS115GPU: ami-0b1445e7453fa075d
      SLES15EKS115: ami-01c272c9d95438039
      SLES15EKS115GPU: ami-01c272c9d95438039
      AMZNEKS114: ami-0eeef7dd6d3ec9159
      AMZNEKS114GPU: ami-038d86cb52053d96b
      AMZNEKS113: ami-0138b6172993c7406
      AMZNEKS113GPU: ami-0da649d31a61c1ab7
      SLES15EKS114: ami-01c272c9d95438039
      SLES15EKS114GPU: ami-01c272c9d95438039
      SLES15EKS113: ami-01c272c9d95438039
      SLES15EKS113GPU: ami-01c272c9d95438039
    ap-southeast-2:
      AMZNEKS116: ami-024f58ea4bd0c05c7
      AMZNEKS116GPU: ami-0b804cad2bfe785c8
      AMZNEKS115: ami-0684ae1d0dc5fa901
      AMZNEKS115GPU: ami-064bd4da004b13664
      SLES15EKS115: ami-0e729696b8705907b
      SLES15EKS115GPU: ami-0e729696b8705907b
      AMZNEKS114: ami-0a19567af0f90aca5
      AMZNEKS114GPU: ami-0ee6c635b208fc312
      AMZNEKS113: ami-0566e58b8e2950b62
      AMZNEKS113GPU: ami-0c691337495366283
      SLES15EKS114: ami-0e729696b8705907b
      SLES15EKS114GPU: ami-0e729696b8705907b
      SLES15EKS113: ami-0e729696b8705907b
      SLES15EKS113GPU: ami-0e729696b8705907b
    ca-central-1:
      AMZNEKS116: ami-0def49c6910e6dc22
      AMZNEKS116GPU: ami-09ee4f8701a2d8058
      AMZNEKS115: ami-0ba89d0e0dd42d231
      AMZNEKS115GPU: ami-0d0f454ca22e14e93
      SLES15EKS115: ami-01b8afc3676031bc7
      SLES15EKS115GPU: ami-01b8afc3676031bc7
      AMZNEKS114: ami-0436a368e709b176f
      AMZNEKS114GPU: ami-0c542c06db55854e2
      AMZNEKS113: ami-0d5a404cdca2dab23
      AMZNEKS113GPU: ami-0ef14b91dbfe206fc
      SLES15EKS114: ami-01b8afc3676031bc7
      SLES15EKS114GPU: ami-01b8afc3676031bc7
      SLES15EKS113: ami-01b8afc3676031bc7
      SLES15EKS113GPU: ami-01b8afc3676031bc7
    eu-central-1:
      AMZNEKS116: ami-0346c011839a8a1e6
      AMZNEKS116GPU: ami-08754a5676c539121
      AMZNEKS115: ami-0d6b6e3fef180d33c
      AMZNEKS115GPU: ami-088fff41fb8211116
      SLES15EKS115: ami-0044ae6906d786f4b
      SLES15EKS115GPU: ami-0044ae6906d786f4b
      AMZNEKS114: ami-07d89ef3be510ae88
      AMZNEKS114GPU: ami-04e508bbfd2652048
      AMZNEKS113: ami-0bde51860c77371e4
      AMZNEKS113GPU: ami-05779e157a1421856
      SLES15EKS114: ami-0044ae6906d786f4b
      SLES15EKS114GPU: ami-0044ae6906d786f4b
      SLES15EKS113: ami-0044ae6906d786f4b
      SLES15EKS113GPU: ami-0044ae6906d786f4b
    eu-north-1:
      AMZNEKS116: ami-0579405765bd52fe5
      AMZNEKS116GPU: ami-01b02f7d93975bc4e
      AMZNEKS115: ami-012e0e486b86ed456
      AMZNEKS115GPU: ami-0f031210eb0f8b96b
      SLES15EKS115: ami-07adafad3d1a31c72
      SLES15EKS115GPU: ami-07adafad3d1a31c72
      AMZNEKS114: ami-0b86468a2d8872e8a
      AMZNEKS114GPU: ami-013140eb1200815ae
      AMZNEKS113: ami-046b83e67325d4d1e
      AMZNEKS113GPU: ami-00dc0a103a744010b
      SLES15EKS114: ami-07adafad3d1a31c72
      SLES15EKS114GPU: ami-07adafad3d1a31c72
      SLES15EKS113: ami-07adafad3d1a31c72
      SLES15EKS113GPU: ami-07adafad3d1a31c72
    eu-west-1:
      AMZNEKS116: ami-0e6058a35a7645609
      AMZNEKS116GPU: ami-0ff4506ac2188c25a
      AMZNEKS115: ami-0404ea7cd2bab0015
      AMZNEKS115GPU: ami-03a06bebadef28bc6
      SLES15EKS115: ami-0ab507a86aac96b91
      SLES15EKS115GPU: ami-0ab507a86aac96b91
      AMZNEKS114: ami-0078bbec159689203
      AMZNEKS114GPU: ami-05b09fab8e6881b1b
      AMZNEKS113: ami-0fe3787aeee6f4c6a
      AMZNEKS113GPU: ami-07ccc7d9ab8b2c8e0
      SLES15EKS114: ami-0ab507a86aac96b91
      SLES15EKS114GPU: ami-0ab507a86aac96b91
      SLES15EKS113: ami-0ab507a86aac96b91
      SLES15EKS113GPU: ami-0ab507a86aac96b91
    eu-west-2:
      AMZNEKS116: ami-0b494b0512ce3c32b
      AMZNEKS116GPU: ami-0c7a2f02534a8db2d
      AMZNEKS115: ami-0d382155426e8604f
      AMZNEKS115GPU: ami-0cb87499d06fa782b
      SLES15EKS115: ami-092e26abbc42e948b
      SLES15EKS115GPU: ami-092e26abbc42e948b
      AMZNEKS114: ami-079cdf2b896dfc5e3
      AMZNEKS114GPU: ami-01ffe600e55ac3aee
      AMZNEKS113: ami-069de972cbb01b70c
      AMZNEKS113GPU: ami-01ae32920b16865c7
      SLES15EKS114: ami-092e26abbc42e948b
      SLES15EKS114GPU: ami-092e26abbc42e948b
      SLES15EKS113: ami-092e26abbc42e948b
      SLES15EKS113GPU: ami-092e26abbc42e948b
    eu-west-3:
      AMZNEKS116: ami-01afc71c919d52362
      AMZNEKS116GPU: ami-0131e2ba82a415083
      AMZNEKS115: ami-0f653aaf7037ca52b
      AMZNEKS115GPU: ami-0c0d487594e88da7e
      SLES15EKS115: ami-02752a8e80a726bf0
      SLES15EKS115GPU: ami-02752a8e80a726bf0
      AMZNEKS114: ami-06241b48a1dbabc1c
      AMZNEKS114GPU: ami-0c5534d9c3b6970c5
      AMZNEKS113: ami-01190703fc5ee19d9
      AMZNEKS113GPU: ami-016785e454360d061
      SLES15EKS114: ami-02752a8e80a726bf0
      SLES15EKS114GPU: ami-02752a8e80a726bf0
      SLES15EKS113: ami-02752a8e80a726bf0
      SLES15EKS113GPU: ami-02752a8e80a726bf0
    sa-east-1:
      AMZNEKS116: ami-04c7eafaadfe8cb2a
      AMZNEKS116GPU: ami-0a78ec92b9283a41d
      AMZNEKS115: ami-0f03b133b96ec8d77
      AMZNEKS115GPU: ami-0a428a61a87587258
      SLES15EKS115: ami-03f86014a2e5c11fd
      SLES15EKS115GPU: ami-03f86014a2e5c11fd
      AMZNEKS114: ami-0037a33877a9682d1
      AMZNEKS114GPU: ami-085d4a23a3a5c2087
      AMZNEKS113: ami-0ac99c9c7e7522290
      AMZNEKS113GPU: ami-065c10451d52735ac
      SLES15EKS114: ami-03f86014a2e5c11fd
      SLES15EKS114GPU: ami-03f86014a2e5c11fd
      SLES15EKS113: ami-03f86014a2e5c11fd
      SLES15EKS113GPU: ami-03f86014a2e5c11fd
    us-east-1:
      AMZNEKS116: ami-0d960646974cf9e5b
      AMZNEKS116GPU: ami-041b62e0d89a0f727
      AMZNEKS115: ami-05faeb5c6f7686e01
      AMZNEKS115GPU: ami-0704c217605dec052
      SLES15EKS115: ami-0e0fcf63653340b66
      SLES15EKS115GPU: ami-0e0fcf63653340b66
      AMZNEKS114: ami-0390532ce2d4adf6e
      AMZNEKS114GPU: ami-006962d246e5f71bd
      AMZNEKS113: ami-05f6d0d820b0f0c9c
      AMZNEKS113GPU: ami-086b79e23ebfec079
      SLES15EKS114: ami-0e0fcf63653340b66
      SLES15EKS114GPU: ami-0e0fcf63653340b66
      SLES15EKS113: ami-0e0fcf63653340b66
      SLES15EKS113GPU: ami-0e0fcf63653340b66
    us-east-2:
      AMZNEKS116: ami-0ce799fcbc744c156
      AMZNEKS116GPU: ami-0e3efe176e2142382
      AMZNEKS115: ami-0da02e7a84ce1734c
      AMZNEKS115GPU: ami-03def67e28552dc63
      SLES15EKS115: ami-054462c52d9c225ce
      SLES15EKS115GPU: ami-054462c52d9c225ce
      AMZNEKS114: ami-06d215dda1fb4e16c
      AMZNEKS114GPU: ami-0c5568b21be883b37
      AMZNEKS113: ami-05d9a451e0512a725
      AMZNEKS113GPU: ami-03cec68faf02912ca
      SLES15EKS114: ami-054462c52d9c225ce
      SLES15EKS114GPU: ami-054462c52d9c225ce
      SLES15EKS113: ami-054462c52d9c225ce
      SLES15EKS113GPU: ami-054462c52d9c225ce
    us-west-2:
      AMZNEKS116: ami-0c2a77d3d158749aa
      AMZNEKS116GPU: ami-04611171965b2a219
      AMZNEKS115: ami-0e5a95ebb5f24ef30
      AMZNEKS115GPU: ami-0489da41209229234
      SLES15EKS115: ami-0d218397f35e41108
      SLES15EKS115GPU: ami-0d218397f35e41108
      AMZNEKS114: ami-0505d1ba2e159976b
      AMZNEKS114GPU: ami-09ea3a0ddfb7ea258
      AMZNEKS113: ami-0bdc15bbd7a7d741d
      AMZNEKS113GPU: ami-0279cc1f259846915
      SLES15EKS114: ami-0d218397f35e41108
      SLES15EKS114GPU: ami-0d218397f35e41108
      SLES15EKS113: ami-0d218397f35e41108
      SLES15EKS113GPU: ami-0d218397f35e41108
    me-south-1:
      AMZNEKS116: ami-00e1213afc28b6173
      AMZNEKS116GPU: ami-0e138488f6d908b63
      AMZNEKS115: ami-0855735594a1dc8c9
      AMZNEKS115GPU: ami-035c63d88d2fa4a91
      SLES15EKS115: ami-01dd80fcffd8fee08
      SLES15EKS115GPU: ami-01dd80fcffd8fee08
      AMZNEKS114: ami-06f40f0cd693eac8c
      AMZNEKS114GPU: ami-076cbf3f87cbce516
      AMZNEKS113: ami-052fe025938668214
      AMZNEKS113GPU: ami-0804f5715d9b69198
      SLES15EKS114: ami-01dd80fcffd8fee08
      SLES15EKS114GPU: ami-01dd80fcffd8fee08
      SLES15EKS113: ami-01dd80fcffd8fee08
      SLES15EKS113GPU: ami-01dd80fcffd8fee08
    ap-east-1:
      AMZNEKS116: ami-07ff9b69ee0146949
      AMZNEKS116GPU: ami-09bc5671fb665e32f
      AMZNEKS115: ami-0402b5904131b74f7
      AMZNEKS115GPU: ami-0998aab7b9ae1bf00
      SLES15EKS115: ami-0f531e80da9c83538
      SLES15EKS115GPU: ami-0f531e80da9c83538
      AMZNEKS114: ami-0ba3509b4a7d886f4
      AMZNEKS114GPU: ami-0ce039549634cee56
      AMZNEKS113: ami-02d1441fe6578093a
      AMZNEKS113GPU: ami-09c631686ac6520d5
      SLES15EKS114: ami-0f531e80da9c83538
      SLES15EKS114GPU: ami-0f531e80da9c83538
      SLES15EKS113: ami-0f531e80da9c83538
      SLES15EKS113GPU: ami-0f531e80da9c83538
    cn-north-1:
      AMZNEKS116: ami-0b01d2a7c2bc9b451
      AMZNEKS116GPU: ami-0e177f90b83e1a55d
      AMZNEKS115: ami-0e590ed89e7cf5208
      AMZNEKS115GPU: ami-0a9ac0ec7770c8241
      SLES15EKS115: ami-0a679f1f91f1126c9
      SLES15EKS115GPU: ami-0a679f1f91f1126c9
      AMZNEKS114: ami-0271f2b42424b2a75
      AMZNEKS114GPU: ami-083c891c1e2cb8ea3
      AMZNEKS113: ami-09fa13a4183f34c16
      AMZNEKS113GPU: ami-0d0332e015835539f
      SLES15EKS114: ami-0a679f1f91f1126c9
      SLES15EKS114GPU: ami-0a679f1f91f1126c9
      SLES15EKS113: ami-0a679f1f91f1126c9
      SLES15EKS113GPU: ami-0a679f1f91f1126c9
    cn-northwest-1:
      AMZNEKS116: ami-0236e527487d0c09c
      AMZNEKS116GPU: ami-0151f0a3d6f336ce3
      AMZNEKS115: ami-07e030799148f439a
      AMZNEKS115GPU: ami-0961892c7f81c1b85
      SLES15EKS115: ami-0e8c0a5deaf823a88
      SLES15EKS115GPU: ami-0e8c0a5deaf823a88
      AMZNEKS114: ami-0c620997cfecf110a
      AMZNEKS114GPU: ami-02a829953a68f9d0a
      AMZNEKS113: ami-082e773d2573f8aab
      AMZNEKS113GPU: ami-0d9ce187adf5d3cf6
      SLES15EKS114: ami-0e8c0a5deaf823a88
      SLES15EKS114GPU: ami-0e8c0a5deaf823a88
      SLES15EKS113: ami-0e8c0a5deaf823a88
      SLES15EKS113GPU: ami-0e8c0a5deaf823a88
Resources:
  CleanupSecurityGroupDependencies:
    Condition: CleanupSGs
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !Ref CleanupSecurityGroupDependenciesLambdaArn
      SecurityGroups:
        - !If
          - DisableManagedNodeGroup
          - !Ref NodeSecurityGroup
          - !Ref 'AWS::NoValue'
  NodeSecurityGroup:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  ManagedNodeSecurityGroupIngress:
    Metadata:
      cfn-lint: { config: { ignore_checks: [E3008] } }
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSG
      SourceSecurityGroupId: !Ref NodeSG
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeSG:
    Condition: EnableManagedNodeGroup
    Type: Custom::NodeSG
    Properties:
      ServiceToken: !Ref NodeSGFunctionArn
      ClusterName: !Ref EKSControlPlane
      NodeGroupName: !GetAtt EKSNodegroup.NodegroupName
  NodeGroup:
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
      DependsOn2: !If [ EnableProxy, !Ref ConfigureProxy, !Ref "AWS::NoValue" ]
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: !If
        - 3AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
        - !If
          - 2AZDeployment
          - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
          - [ !Ref PrivateSubnet1ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
        - Key: !Sub 'k8s.io/cluster-autoscaler/${EKSControlPlane}'
          Value: ''
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  ConfigureProxy:
    Condition: EnableProxy
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${EKSControlPlane}"
      HttpProxy: !Ref HttpProxy
      VpcId: !Ref VPCID
  NodeLaunchConfig:
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/install-worker.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service${Version}'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  Version: !If [GreaterThan114, ".1.15", ""]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - UseCustomAmi
        - !Ref CustomAmiId
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - !FindInMap
            - OStoK8sVersionMap
            - !Ref NodeAMIOS
            - !FindInMap
              - K8sVersionMap
              - !Ref KubernetesVersion
              - !FindInMap
                - InstanceTypes
                - !Ref NodeInstanceType
                - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            set -o xtrace
            function signal() {
              $1/cfn-signal --exit-code $2 \
                --stack  ${AWS::StackName} \
                --resource NodeGroup  \
                --region ${AWS::Region}
            }
            ${ProxySetup}
            ${BootStrap}
            ${ProxyPostSetup}
            ${Signal}
          - ProxySetup: !If
              - EnableProxy
              - !Sub |
                  MAC=$(curl -s http://169.254.169.254/latest/meta-data/mac/)
                  VPCCIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks | xargs | tr ' ' ',')
                  cat <<EOF >> /etc/environment
                  HTTP_PROXY=${HttpProxy}
                  HTTPS_PROXY=${HttpProxy}
                  http_proxy=${HttpProxy}
                  https_proxy=${HttpProxy}
                  no_proxy=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  NO_PROXY=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  EOF
                  set -a
                  source /etc/environment
              - ""
            ProxyPostSetup: !If
              - EnableProxy
              - |
                  mkdir -p /etc/systemd/system/docker.service.d
                  cat <<EOF >> /etc/systemd/system/docker.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  cat <<EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  systemctl daemon-reload
                  systemctl enable --now --no-block docker
                  systemctl restart docker
                  systemctl restart kubelet
              - ""
            Signal: !If
              - AmznOS
              - |
                  signal /opt/aws/bin $?
              - |
                  signal /usr/bin $?
                  if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                    # Need to enable some kernel boot options and reboot
                    sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                    grub2-mkconfig -o /boot/grub2/grub.cfg
                    reboot
                  fi
            BootStrap: !If
            - AmznOS
            - !Sub |
                /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments} || signal /opt/aws/bin $1
            - !Sub |
                if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                  zypper in -y python2-setuptools
                  update-alternatives --set easy_install /usr/bin/easy_install-2.7
                fi
                easy_install https://cloudformation-examples.s3.amazonaws.com/aws-cfn-bootstrap-latest.zip
                /usr/bin/cfn-init \
                  --stack ${AWS::StackName} \
                  --resource NodeLaunchConfig \
                  --region ${AWS::Region}
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
    Condition: EnableManagedNodeGroup
    Properties:
      ClusterName: !Ref EKSControlPlane
      NodeRole: !Ref NodeInstanceRoleArn
      AmiType: !If [ EnableManagedNodeGroup, !Ref 'ManagedNodeGroupAMIType', !Ref "AWS::NoValue" ]
      InstanceTypes:
        - !Ref 'NodeInstanceType'
      DiskSize: !Ref NodeVolumeSize
      ScalingConfig:
        MinSize: !Ref NumberOfNodes
        DesiredSize: !Ref NumberOfNodes
        MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      Labels:
        Key: Name
        Value: !If [ MNGLBL, !Sub '${EKSControlPlane}-${NodeGroupName}-Node', !Ref MangedNodeGroupLabel ]
        PropagateAtLaunch: true
      Subnets: !If
      - 3AZDeployment
      - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
      - !If
        - 2AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
        - [ !Ref PrivateSubnet1ID ]
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
Outputs:
  EKSNodeSecurityGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref NodeSecurityGroup
      - !If [ EnableManagedNodeGroup, !Ref NodeSG, "" ]
  NodeAutoScalingGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref 'NodeGroup'
      - !If [ EnableManagedNodeGroup, !Ref 'EKSNodegroup', "" ]