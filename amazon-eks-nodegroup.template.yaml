AWSTemplateFormatVersion: "2010-09-09"
Description: Deploys EKS nodes into an existing VPC (qs-1p7nknoid)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
          - NodeAMIOS
          - NodeInstanceProfile
          - NodeInstanceRoleName
          - NodeInstanceRoleArn
          - BootstrapArguments
          - HttpProxy
          - CustomAmiId
      - Label:
          default: EKS configuration
        Parameters:
          - EKSControlPlane
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
          - NodeGroupName
          - NodeVolumeSize
          - ManagedNodeGroup
          - ManagedNodeGroupAMIType
          - ProvisionClusterAutoScaler
          - ControlPlaneSecurityGroup
          - KubernetesVersion
          - TargetGroupARNs
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
          - CleanupSecurityGroupDependenciesLambdaArn
          - NodeSGFunctionArn
    ParameterLabels:
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      KeyPairName:
        default: SSH key name
      NodeAMIOS:
        default: Node AMI operating system
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet3ID:
        default: Private Subnet 3 ID
      VPCID:
        default: VPC ID
      EKSControlPlane:
        default: EKS cluster name
      NodeInstanceType:
        default: Nodes instance type
      NumberOfNodes:
        default: Number of nodes
      MaxNumberOfNodes:
        default: Maximum number of nodes
      NodeGroupName:
        default: Node group name
      NodeVolumeSize:
        default: Node volume size
      ManagedNodeGroup:
        default: Managed Node Group
      ManagedNodeGroupAMIType:
        default: Managed Node Group AMI type
      ProvisionClusterAutoScaler:
        default: Cluster autoscaler
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      CleanupSecurityGroupDependenciesLambdaArn:
        default: Cleanup Security Group dependencies Lambda ARN
      BootstrapArguments:
        default: Bootstrap arguments
      ControlPlaneSecurityGroup:
        default: Control plane Security Group
      NodeInstanceProfile:
        default: Node instance profile
      NodeInstanceRoleName:
        default: Node instance role name
      NodeInstanceRoleArn:
        default: Node instance role ARN
      KubernetesVersion:
        default: Kubernetes version
      CustomAmiId:
        default: Custom AMI id
      HttpProxy:
        default: HTTP proxy
      TargetGroupARNs:
        default: Target Group ARN's
      NodeSGFunctionArn:
        default: Node security group Lambda ARN
  AWSAMIRegionMap:
    Filters:
      AMZNEKS116:
        name: 'amazon-eks-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS116GPU:
        name: 'amazon-eks-gpu-node-1.16-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115:
        name: 'amazon-eks-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114:
        name: 'amazon-eks-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS115GPU:
        name: 'amazon-eks-gpu-node-1.15-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS114GPU:
        name: 'amazon-eks-gpu-node-1.14-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113:
        name: 'amazon-eks-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      AMZNEKS113GPU:
        name: 'amazon-eks-gpu-node-1.13-v20??????'
        owner-id: ['602401143452', '558608220178', '800184023465', '918309763551', '961992271922']
      SLES15EKS115:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS115GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS114GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
      SLES15EKS113GPU:
        name: 'suse-sles-15-sp1-v20??????-hvm-ssd-x86_64'
        owner-id: ['013907871322', '841869936221']
  cfn-lint: { config: { ignore_checks: [W2030] } }
  LintSpellExclude:
    - Managed Node Group
    - files/bootstrap.sh
    - https://github.com/awslabs/amazon-eks-ami
    - autoscaler
    - Lambda
    - Security Group
    - Target Group
    - Kubernetes
    - Instance Profile
    - Role
    - Enabled
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  NodeAMIOS:
    AllowedValues:
      - Amazon-Linux-HVM
      - SUSE-SLES-15-HVM
    Default: Amazon-Linux-HVM
    Description: The Linux distribution for the AMI to be used for the node
      instances.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the workload (e.g.,
      subnet-a0246123)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the workload (e.g.,
      subnet-b1f432cd)
    Type: String
    Default: ""
  PrivateSubnet3ID:
    Description: ID of private subnet 3 in Availability Zone 3 for the workload (e.g.,
      subnet-b1f4a2cd)
    Type: String
    Default: ""
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  CleanupSecurityGroupDependenciesLambdaArn:
    Description: ARN for CleanupSecurityGroupDependencies lambda function
    Type: String
    Default: ""
  NodeInstanceType:
    Default: t3.medium
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    Description: Type of EC2 instance for the node instances
    Type: String
  NumberOfNodes:
    Default: 3
    Description: Number of EKS node instances
    Type: Number
  MaxNumberOfNodes:
    Default: ""
    Description: "[OPTIONAL] The maximum number of Amazon EKS node instances, if left blank will be set to the same value as NumberOfNodes"
    Type: String
  NodeGroupName:
    Default: Default
    Description: Name for EKS node group
    Type: String
  NodeVolumeSize:
    Default: 20
    Description: Size for node volumes
    Type: String
  ManagedNodeGroup:
    AllowedValues: [ "yes", "no" ]
    Default: "no"
    Description: Choose if you want to use a managed node group. If you select "yes", you must select Kubernetes version 1.14 or higher.
    Type: String
  ManagedNodeGroupAMIType:
    Description: Select one of the two AMI types for your Managed Node Group (only applies if you selected Managed Node Group "yes". ).
      GPU instance types should use the AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux AMI with GPU support.
      Non-GPU instances should use the AL2_x86_64 AMI type, which uses the Amazon EKS-optimized Linux AMI.
    AllowedValues: [ "AL2_x86_64", " AL2_x86_64_GPU"]
    Default: "AL2_x86_64"
    Type: String
  MangedNodeGroupLabel:
    Description: Add a custom name label to the Managed Node Group Nodes. If you dont do this then a default one will be added for you.
    Type: String
    Default: ''
  EKSControlPlane:
    Description: Name of the EKS cluster to join
    Type: String
  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami.
    Type: String
    Default: ""
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: EKS control plane EC2 Security Group
  NodeInstanceProfile:
    Type: String
    Description: ARN for IAM Instance Profile to attach to nodes
  NodeInstanceRoleName:
    Type: String
    Description: IAM Role name to attach to nodes
  NodeInstanceRoleArn:
    Type: String
    Description: IAM Role ARN to attach to nodes
  KubernetesVersion:
    Type: String
    AllowedValues: [ "1.16", "1.15", "1.14", "1.13" ]
    Default: "1.16"
    Description: The Kubernetes control plane version.
  TargetGroupARNs:
    Type: CommaDelimitedList
    Default: ""
    Description: "[OPTIONAL] List of Target Group ARN's to use with Managed Node Groups"
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), dots(.) and forward slash (/).
    Default: quickstart-amazon-eks/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), dots(.) and
      forward slash (/).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is
      hosted. When using your own bucket, you must specify this value.
    Type: String
  CustomAmiId:
    Type: String
    Default: ""
    Description: "[OPTIONAL] If an AMI id is specified here it will be used in stead of the ami determined from the OS/region."
  HttpProxy:
    Type: String
    Default: ""
    Description: "[OPTIONAL] Specify the host name for an HTTP proxy to use for outbound internet access."
  NodeSGFunctionArn:
    Type: String
    Description: Function ARN to fetch node Security Group for managed node groups
  ProvisionClusterAutoScaler:
    Type: String
    AllowedValues: [ Enabled, Disabled ]
    Default: Disabled
    Description: Choose Enabled to enable Kubernetes cluster autoscaler.
Conditions:
  EnableProxy: !Not [!Equals [!Ref HttpProxy, ""]]
  3AZDeployment: !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  2AZDeployment: !Or
    - !Not [!Equals [!Ref PrivateSubnet2ID, ""]]
    - !Not [!Equals [!Ref PrivateSubnet3ID, ""]]
  MaxNodes: !Not [ !Equals [ !Ref MaxNumberOfNodes, "" ] ]
  AmznOS: !Equals
    - !Ref NodeAMIOS
    - Amazon-Linux-HVM
  SuseOS: !Equals
    - !Ref NodeAMIOS
    - SUSE-SLES-15-HVM
  DisableTargetGroups: !Equals
    - !Join [",", !Ref 'TargetGroupARNs' ]
    - ""
  IsSingleInstance: !Equals
    - !Ref NumberOfNodes
    - 1
  UseCustomAmi: !Not [ !Equals [ !Ref CustomAmiId, "" ] ]
  CleanupSGs: !Or
    - !Not [ !Equals [ !Ref CleanupSecurityGroupDependenciesLambdaArn, "" ] ]
    - !Equals [ !Ref 'ManagedNodeGroup', 'no' ]
  AutoScalerDisabled: !Equals [ !Ref 'ProvisionClusterAutoScaler', 'Disabled' ]
  DisableManagedNodeGroup: !Equals [ !Ref 'ManagedNodeGroup' , 'no' ]
  EnableManagedNodeGroup: !And
     - !Equals [ !Ref 'ManagedNodeGroup', 'yes' ]
     - !Condition AutoScalerDisabled
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  GreaterThan114: !Not
    - !Or
      - !Equals [ !Ref 'KubernetesVersion', '1.14' ]
      - !Equals [ !Ref 'KubernetesVersion', '1.13' ]
  MNGLBL: !Equals [ !Ref 'MangedNodeGroupLabel', '' ]
Mappings:
  K8sVersionMap:
    "1.13":
      BinaryPath: 1.13.8/2019-08-14/bin/linux/amd64
      STD: EKS113
      GPU: EKS113GPU
    "1.14":
      BinaryPath: 1.14.6/2019-08-22/bin/linux/amd64
      STD: EKS114
      GPU: EKS114GPU
    "1.15":
      BinaryPath: 1.15.10/2020-02-22/bin/linux/amd64
      STD: EKS115
      GPU: EKS115GPU
    "1.16":
      BinaryPath: 1.16.8/2020-04-16/bin/linux/amd64
      STD: EKS116
      GPU: EKS116GPU
  InstanceTypes:
    t3.nano: { Type: STD }
    t3.micro: { Type: STD }
    t3.small: { Type: STD }
    t3.medium: { Type: STD }
    t3.large: { Type: STD }
    t3.xlarge: { Type: STD }
    t3.2xlarge: { Type: STD }
    m5.large: { Type: STD }
    m5.xlarge: { Type: STD }
    m5.2xlarge: { Type: STD }
    m5.4xlarge: { Type: STD }
    m5.12xlarge: { Type: STD }
    m5.24xlarge: { Type: STD }
    c5.large: { Type: STD }
    c5.xlarge: { Type: STD }
    c5.2xlarge: { Type: STD }
    c5.4xlarge: { Type: STD }
    c5.9xlarge: { Type: STD }
    c5.18xlarge: { Type: STD }
    i3.large: { Type: STD }
    i3.xlarge: { Type: STD }
    i3.2xlarge: { Type: STD }
    i3.4xlarge: { Type: STD }
    i3.8xlarge: { Type: STD }
    i3.16xlarge: { Type: STD }
    x1.16xlarge: { Type: STD }
    x1.32xlarge: { Type: STD }
    p3.2xlarge: { Type: GPU }
    p3.8xlarge: { Type: GPU }
    p3.16xlarge: { Type: GPU }
    r5.large: { Type: STD }
    r5.xlarge: { Type: STD }
    r5.2xlarge: { Type: STD }
    r5.4xlarge: { Type: STD }
    r5.12xlarge: { Type: STD }
    r5.24xlarge: { Type: STD }
    r5d.large: { Type: STD }
    r5d.xlarge: { Type: STD }
    r5d.2xlarge: { Type: STD }
    r5d.4xlarge: { Type: STD }
    r5d.12xlarge: { Type: STD }
    r5d.24xlarge: { Type: STD }
    z1d.large: { Type: STD }
    z1d.xlarge: { Type: STD }
    z1d.2xlarge: { Type: STD }
    z1d.3xlarge: { Type: STD }
    z1d.6xlarge: { Type: STD }
    z1d.12xlarge: { Type: STD }
  OStoK8sVersionMap:
    Amazon-Linux-HVM:
      EKS113: AMZNEKS113
      EKS113GPU: AMZNEKS113GPU
      EKS114: AMZNEKS114
      EKS114GPU: AMZNEKS114GPU
      EKS115: AMZNEKS115
      EKS115GPU: AMZNEKS115GPU
      EKS116: AMZNEKS116
      EKS116GPU: AMZNEKS116GPU
    SUSE-SLES-15-HVM:
      EKS113: SLES15EKS113
      EKS113GPU: SLES15EKS113GPU
      EKS114: SLES15EKS114
      EKS114GPU: SLES15EKS114GPU
      EKS115: SLES15EKS115
      EKS115GPU: SLES15EKS115GPU
      EKS116: SLES15EKS116
      EKS116GPU: SLES15EKS116GPU
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNEKS116: ami-0149b807f4fe983d9
      AMZNEKS116GPU: ami-0067f715a3f2980eb
      AMZNEKS115: ami-0f388e8f23a1b958d
      AMZNEKS115GPU: ami-0d2c732e39c74405f
      AMZNEKS114: ami-04fe442554ca4ec46
      AMZNEKS114GPU: ami-0834f4f00c45c9669
      AMZNEKS113: ami-072beb8115088e3be
      AMZNEKS113GPU: ami-0af40fc626126d3de
      SLES15EKS115: ami-0dae5fda3ab8726c3
      SLES15EKS115GPU: ami-0dae5fda3ab8726c3
      SLES15EKS114: ami-0dae5fda3ab8726c3
      SLES15EKS114GPU: ami-0dae5fda3ab8726c3
      SLES15EKS113: ami-0dae5fda3ab8726c3
      SLES15EKS113GPU: ami-0dae5fda3ab8726c3
    ap-northeast-2:
      AMZNEKS116: ami-0b18567e6d3b05548
      AMZNEKS116GPU: ami-0cda5aa0cea78a0aa
      AMZNEKS115: ami-092abeb02565f2610
      AMZNEKS115GPU: ami-0f11919c8139e8ebc
      SLES15EKS115: ami-0bcca7befe1b4317b
      SLES15EKS115GPU: ami-0bcca7befe1b4317b
      AMZNEKS114: ami-03e489fe6271573f7
      AMZNEKS114GPU: ami-011b4c51c761ede96
      AMZNEKS113: ami-0b604b801b75650be
      AMZNEKS113GPU: ami-0c56d4ca83cb96782
      SLES15EKS114: ami-0bcca7befe1b4317b
      SLES15EKS114GPU: ami-0bcca7befe1b4317b
      SLES15EKS113: ami-0bcca7befe1b4317b
      SLES15EKS113GPU: ami-0bcca7befe1b4317b
    ap-south-1:
      AMZNEKS116: ami-0d74cda3aca12a24a
      AMZNEKS116GPU: ami-0df7f1bceacf02212
      AMZNEKS115: ami-0a53b12f8a7d5b986
      AMZNEKS115GPU: ami-045c43e01a93d579c
      SLES15EKS115: ami-065edd4e2270fb2e1
      SLES15EKS115GPU: ami-065edd4e2270fb2e1
      AMZNEKS114: ami-02858b6cd5bcb3448
      AMZNEKS114GPU: ami-0cc1f96a2feb40ad7
      AMZNEKS113: ami-02f1e27925a733032
      AMZNEKS113GPU: ami-0587a0f1824983fd4
      SLES15EKS114: ami-065edd4e2270fb2e1
      SLES15EKS114GPU: ami-065edd4e2270fb2e1
      SLES15EKS113: ami-065edd4e2270fb2e1
      SLES15EKS113GPU: ami-065edd4e2270fb2e1
    ap-southeast-1:
      AMZNEKS116: ami-0efde32470ee9e66f
      AMZNEKS116GPU: ami-00cff752abe8ecc2f
      AMZNEKS115: ami-0afeae4543435bb1b
      AMZNEKS115GPU: ami-04e6b5bfee52d73a2
      SLES15EKS115: ami-0b7f7c934cfe30c63
      SLES15EKS115GPU: ami-0b7f7c934cfe30c63
      AMZNEKS114: ami-099e22010ae3a8ce5
      AMZNEKS114GPU: ami-06d448246b571c030
      AMZNEKS113: ami-0befcff20d3569505
      AMZNEKS113GPU: ami-0530ea18f5665f636
      SLES15EKS114: ami-0b7f7c934cfe30c63
      SLES15EKS114GPU: ami-0b7f7c934cfe30c63
      SLES15EKS113: ami-0b7f7c934cfe30c63
      SLES15EKS113GPU: ami-0b7f7c934cfe30c63
    ap-southeast-2:
      AMZNEKS116: ami-09e7454072d169c9b
      AMZNEKS116GPU: ami-07fc76b2278490faf
      AMZNEKS115: ami-036926f505b326432
      AMZNEKS115GPU: ami-006871118ebacb315
      SLES15EKS115: ami-0d6f00758277a28f7
      SLES15EKS115GPU: ami-0d6f00758277a28f7
      AMZNEKS114: ami-089257f77fcd71f73
      AMZNEKS114GPU: ami-0c3f452c110470003
      AMZNEKS113: ami-0c85f26222df35724
      AMZNEKS113GPU: ami-09ffa770f3727ce80
      SLES15EKS114: ami-0d6f00758277a28f7
      SLES15EKS114GPU: ami-0d6f00758277a28f7
      SLES15EKS113: ami-0d6f00758277a28f7
      SLES15EKS113GPU: ami-0d6f00758277a28f7
    ca-central-1:
      AMZNEKS116: ami-0d4070203e2326d01
      AMZNEKS116GPU: ami-0a55a04c97ead4c95
      AMZNEKS115: ami-0aff4c9bb60625f20
      AMZNEKS115GPU: ami-0afd861dff7808a5b
      SLES15EKS115: ami-06ab9a53ab05446fa
      SLES15EKS115GPU: ami-06ab9a53ab05446fa
      AMZNEKS114: ami-08b474403d21287ff
      AMZNEKS114GPU: ami-0f64a0007fb92f448
      AMZNEKS113: ami-0e3c082fa66ffd229
      AMZNEKS113GPU: ami-05ed5e0ba072cd489
      SLES15EKS114: ami-06ab9a53ab05446fa
      SLES15EKS114GPU: ami-06ab9a53ab05446fa
      SLES15EKS113: ami-06ab9a53ab05446fa
      SLES15EKS113GPU: ami-06ab9a53ab05446fa
    eu-central-1:
      AMZNEKS116: ami-087e50c862ea569de
      AMZNEKS116GPU: ami-029810cb720f90bc6
      AMZNEKS115: ami-0a039dd7f09fcf7da
      AMZNEKS115GPU: ami-0f6ea71c470422f9d
      SLES15EKS115: ami-0c99be8a286251d31
      SLES15EKS115GPU: ami-0c99be8a286251d31
      AMZNEKS114: ami-0de5ade925ce96a10
      AMZNEKS114GPU: ami-010573a4ca7ed9bb3
      AMZNEKS113: ami-02a8be44c138fca21
      AMZNEKS113GPU: ami-0941b32165b9b8033
      SLES15EKS114: ami-0c99be8a286251d31
      SLES15EKS114GPU: ami-0c99be8a286251d31
      SLES15EKS113: ami-0c99be8a286251d31
      SLES15EKS113GPU: ami-0c99be8a286251d31
    eu-north-1:
      AMZNEKS116: ami-0a1d81b0fbc9fd1f5
      AMZNEKS116GPU: ami-05b90cf61ff86fb41
      AMZNEKS115: ami-0746b290da8e6de11
      AMZNEKS115GPU: ami-0273d11a930b623fe
      SLES15EKS115: ami-0d4ba232167647a22
      SLES15EKS115GPU: ami-0d4ba232167647a22
      AMZNEKS114: ami-0446d72a4c3d72c12
      AMZNEKS114GPU: ami-07578ebfeb7f52915
      AMZNEKS113: ami-0c79f63c4d99095eb
      AMZNEKS113GPU: ami-070b49f1ec924cd2e
      SLES15EKS114: ami-0d4ba232167647a22
      SLES15EKS114GPU: ami-0d4ba232167647a22
      SLES15EKS113: ami-0d4ba232167647a22
      SLES15EKS113GPU: ami-0d4ba232167647a22
    eu-west-1:
      AMZNEKS116: ami-057c0fce15c131e16
      AMZNEKS116GPU: ami-0c0712e5c48be6b49
      AMZNEKS115: ami-02e306a823081708f
      AMZNEKS115GPU: ami-099196baf24f23f86
      SLES15EKS115: ami-0c7c799aac480ea77
      SLES15EKS115GPU: ami-0c7c799aac480ea77
      AMZNEKS114: ami-00fc8561a9089308d
      AMZNEKS114GPU: ami-0fb33d577c7c735f3
      AMZNEKS113: ami-04950962486ef4fdd
      AMZNEKS113GPU: ami-0168664c1afa733b7
      SLES15EKS114: ami-0c7c799aac480ea77
      SLES15EKS114GPU: ami-0c7c799aac480ea77
      SLES15EKS113: ami-0c7c799aac480ea77
      SLES15EKS113GPU: ami-0c7c799aac480ea77
    eu-west-2:
      AMZNEKS116: ami-0c347c2a3a6cfc4b7
      AMZNEKS116GPU: ami-0c83838846a8ca988
      AMZNEKS115: ami-02fdd8b3b30aeecad
      AMZNEKS115GPU: ami-0ebe5b2ed08924901
      SLES15EKS115: ami-01f3fa4b1427a8522
      SLES15EKS115GPU: ami-01f3fa4b1427a8522
      AMZNEKS114: ami-08217ceab5e3eb21e
      AMZNEKS114GPU: ami-0c4e460bb7e5fbd4b
      AMZNEKS113: ami-0bbe5fa9905e42951
      AMZNEKS113GPU: ami-0919105cad1eae2fd
      SLES15EKS114: ami-01f3fa4b1427a8522
      SLES15EKS114GPU: ami-01f3fa4b1427a8522
      SLES15EKS113: ami-01f3fa4b1427a8522
      SLES15EKS113GPU: ami-01f3fa4b1427a8522
    eu-west-3:
      AMZNEKS116: ami-0350fdc53a968c288
      AMZNEKS116GPU: ami-0f6a56026c6cbef93
      AMZNEKS115: ami-01bfa9ea33d63c5da
      AMZNEKS115GPU: ami-040b2d94b8de7581d
      SLES15EKS115: ami-04451e7a9fa8ac139
      SLES15EKS115GPU: ami-04451e7a9fa8ac139
      AMZNEKS114: ami-08021a49e3738213a
      AMZNEKS114GPU: ami-0f896a5c369d5b704
      AMZNEKS113: ami-079fe1ea5ce71bb5f
      AMZNEKS113GPU: ami-0b7169fc13a7a938b
      SLES15EKS114: ami-04451e7a9fa8ac139
      SLES15EKS114GPU: ami-04451e7a9fa8ac139
      SLES15EKS113: ami-04451e7a9fa8ac139
      SLES15EKS113GPU: ami-04451e7a9fa8ac139
    sa-east-1:
      AMZNEKS116: ami-0dd2e6d75597297df
      AMZNEKS116GPU: ami-0eb78d8fcd2e7278e
      AMZNEKS115: ami-084c1c77ea3659640
      AMZNEKS115GPU: ami-0efea49db67a4e941
      SLES15EKS115: ami-0d760167d68cf77ba
      SLES15EKS115GPU: ami-0d760167d68cf77ba
      AMZNEKS114: ami-0b1a720adfb83883e
      AMZNEKS114GPU: ami-0b142c577021d1c7c
      AMZNEKS113: ami-05bdf02414200c3f0
      AMZNEKS113GPU: ami-028c71f4066e792c1
      SLES15EKS114: ami-0d760167d68cf77ba
      SLES15EKS114GPU: ami-0d760167d68cf77ba
      SLES15EKS113: ami-0d760167d68cf77ba
      SLES15EKS113GPU: ami-0d760167d68cf77ba
    us-east-1:
      AMZNEKS116: ami-011b077a6cc247f40
      AMZNEKS116GPU: ami-0af2973093296688b
      AMZNEKS115: ami-08318b024b5031a05
      AMZNEKS115GPU: ami-05862a57252e0243f
      SLES15EKS115: ami-0b326695e023b93d5
      SLES15EKS115GPU: ami-0b326695e023b93d5
      AMZNEKS114: ami-07e0ca5eb121d3ed8
      AMZNEKS114GPU: ami-08dc081250e6c9d58
      AMZNEKS113: ami-06d4afa813dab1094
      AMZNEKS113GPU: ami-08aadb0de818c055e
      SLES15EKS114: ami-0b326695e023b93d5
      SLES15EKS114GPU: ami-0b326695e023b93d5
      SLES15EKS113: ami-0b326695e023b93d5
      SLES15EKS113GPU: ami-0b326695e023b93d5
    us-east-2:
      AMZNEKS116: ami-05fc7ae9bc84e5708
      AMZNEKS116GPU: ami-0a400eff168b9ce36
      AMZNEKS115: ami-0587447b4aab53748
      AMZNEKS115GPU: ami-0c9ca6703512238cd
      SLES15EKS115: ami-0efc9a15a1fd61f97
      SLES15EKS115GPU: ami-0efc9a15a1fd61f97
      AMZNEKS114: ami-0a28e619495bc8b43
      AMZNEKS114GPU: ami-01a54d137dc22617f
      AMZNEKS113: ami-0f7163190303e0c66
      AMZNEKS113GPU: ami-06d5a30b51bd1be31
      SLES15EKS114: ami-0efc9a15a1fd61f97
      SLES15EKS114GPU: ami-0efc9a15a1fd61f97
      SLES15EKS113: ami-0efc9a15a1fd61f97
      SLES15EKS113GPU: ami-0efc9a15a1fd61f97
    us-west-2:
      AMZNEKS116: ami-0d038c77c015e1353
      AMZNEKS116GPU: ami-0d190d9117f2bca4a
      AMZNEKS115: ami-06cff885bac5d57d2
      AMZNEKS115GPU: ami-0acfd12e21dcb2865
      SLES15EKS115: ami-0ccefbfd6cd77b0a2
      SLES15EKS115GPU: ami-0ccefbfd6cd77b0a2
      AMZNEKS114: ami-02e50fe306d1f2ee3
      AMZNEKS114GPU: ami-062efbd0994838308
      AMZNEKS113: ami-0281860670818ab6a
      AMZNEKS113GPU: ami-0f351755e6e80666a
      SLES15EKS114: ami-0ccefbfd6cd77b0a2
      SLES15EKS114GPU: ami-0ccefbfd6cd77b0a2
      SLES15EKS113: ami-0ccefbfd6cd77b0a2
      SLES15EKS113GPU: ami-0ccefbfd6cd77b0a2
    me-south-1:
      AMZNEKS116: ami-0c1e42858980effe4
      AMZNEKS116GPU: ami-0678dcc287eb590b6
      AMZNEKS115: ami-0eb0988b132f0988c
      AMZNEKS115GPU: ami-0b2e5d49c576451b8
      SLES15EKS115: ami-08ab47783ca7d9bab
      SLES15EKS115GPU: ami-08ab47783ca7d9bab
      AMZNEKS114: ami-085a4aafef816fed7
      AMZNEKS114GPU: ami-04e1a8d4238648a26
      AMZNEKS113: ami-038b24ebe06c84e1c
      AMZNEKS113GPU: ami-0d7ba9e81be34c5cd
      SLES15EKS114: ami-08ab47783ca7d9bab
      SLES15EKS114GPU: ami-08ab47783ca7d9bab
      SLES15EKS113: ami-08ab47783ca7d9bab
      SLES15EKS113GPU: ami-08ab47783ca7d9bab
    ap-east-1:
      AMZNEKS116: ami-0b5ab33053d4ca4dc
      AMZNEKS116GPU: ami-0384663d9962321f1
      AMZNEKS115: ami-0a4a9161a46e8701e
      AMZNEKS115GPU: ami-0ab212e5c28fa6942
      SLES15EKS115: ami-0ba53281cb40c2c23
      SLES15EKS115GPU: ami-0ba53281cb40c2c23
      AMZNEKS114: ami-0a8ce3dba6bcccd7c
      AMZNEKS114GPU: ami-0a61180f87035fc87
      AMZNEKS113: ami-0d4f0f388b2a9910a
      AMZNEKS113GPU: ami-0836c13afa8240b4d
      SLES15EKS114: ami-0ba53281cb40c2c23
      SLES15EKS114GPU: ami-0ba53281cb40c2c23
      SLES15EKS113: ami-0ba53281cb40c2c23
      SLES15EKS113GPU: ami-0ba53281cb40c2c23
    cn-north-1:
      AMZNEKS116: ami-0815bee595cc10933
      AMZNEKS116GPU: ami-0ebfcdbaf4e6b8a0e
      AMZNEKS115: ami-0b1c9c2661745fd57
      AMZNEKS115GPU: ami-0739ef983eedbcbab
      SLES15EKS115: ami-065f90c5b77bb1f4a
      SLES15EKS115GPU: ami-065f90c5b77bb1f4a
      AMZNEKS114: ami-0d7f3bd9e802ef4cf
      AMZNEKS114GPU: ami-00acfa1c6f6ffb7a3
      AMZNEKS113: ami-04a69a9ed583a17f4
      AMZNEKS113GPU: ami-0c58d282fb9df6789
      SLES15EKS114: ami-065f90c5b77bb1f4a
      SLES15EKS114GPU: ami-065f90c5b77bb1f4a
      SLES15EKS113: ami-065f90c5b77bb1f4a
      SLES15EKS113GPU: ami-065f90c5b77bb1f4a
    cn-northwest-1:
      AMZNEKS116: ami-0753ca1a20f3edcd4
      AMZNEKS116GPU: ami-09a78c160a3a2a9ac
      AMZNEKS115: ami-0cd002d6b160aaf00
      AMZNEKS115GPU: ami-02923cf434054fd00
      SLES15EKS115: ami-036d95c22c0c6df0f
      SLES15EKS115GPU: ami-036d95c22c0c6df0f
      AMZNEKS114: ami-08e0004e8dbdd536a
      AMZNEKS114GPU: ami-007d18cb65de2bc21
      AMZNEKS113: ami-0faa600324db2f644
      AMZNEKS113GPU: ami-0bbb390772cc101d1
      SLES15EKS114: ami-036d95c22c0c6df0f
      SLES15EKS114GPU: ami-036d95c22c0c6df0f
      SLES15EKS113: ami-036d95c22c0c6df0f
      SLES15EKS113GPU: ami-036d95c22c0c6df0f
Resources:
  CleanupSecurityGroupDependencies:
    Condition: CleanupSGs
    Type: Custom::Cleanup
    Properties:
      ServiceToken: !Ref CleanupSecurityGroupDependenciesLambdaArn
      SecurityGroups:
        - !If
          - DisableManagedNodeGroup
          - !Ref NodeSecurityGroup
          - !Ref 'AWS::NoValue'
  NodeSecurityGroup:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the node group
      VpcId: !Ref VPCID
      Tags:
        - Key: !Sub "kubernetes.io/cluster/${EKSControlPlane}"
          Value: 'owned'
  NodeSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  ManagedNodeSecurityGroupIngress:
    Metadata:
      cfn-lint: { config: { ignore_checks: [E3008] } }
    Condition: EnableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow nodes to communicate with each other
      GroupId: !Ref NodeSG
      SourceSecurityGroupId: !Ref NodeSG
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  ClusterControlPlaneSecurityGroupIngress:
    Condition: DisableManagedNodeGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
  NodeSG:
    Condition: EnableManagedNodeGroup
    Type: Custom::NodeSG
    Properties:
      ServiceToken: !Ref NodeSGFunctionArn
      ClusterName: !Ref EKSControlPlane
      NodeGroupName: !GetAtt EKSNodegroup.NodegroupName
  NodeGroup:
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
      DependsOn2: !If [ EnableProxy, !Ref ConfigureProxy, !Ref "AWS::NoValue" ]
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NumberOfNodes
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref NumberOfNodes
      MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      VPCZoneIdentifier: !If
        - 3AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
        - !If
          - 2AZDeployment
          - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
          - [ !Ref PrivateSubnet1ID ]
      TargetGroupARNs: !If [ DisableTargetGroups, !Ref "AWS::NoValue", !Ref TargetGroupARNs ]
      Tags:
        - Key: Name
          Value: !Sub "${EKSControlPlane}-${NodeGroupName}-Node"
          PropagateAtLaunch: true
        - Key: !Sub 'kubernetes.io/cluster/${EKSControlPlane}'
          Value: 'owned'
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: 'true'
          PropagateAtLaunch: true
        - Key: !Sub 'k8s.io/cluster-autoscaler/${EKSControlPlane}'
          Value: ''
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref NumberOfNodes
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !If [IsSingleInstance, 0, 1]
        MaxBatchSize: 1
        WaitOnResourceSignals : true
        PauseTime: PT15M
  ConfigureProxy:
    Condition: EnableProxy
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeManifest-${EKSControlPlane}"
      HttpProxy: !Ref HttpProxy
      VpcId: !Ref VPCID
  NodeLaunchConfig:
    Condition: DisableManagedNodeGroup
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Auth:
          buckets:
            - !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          roleName: !Ref NodeInstanceRoleName
          type: S3
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/worker/bootstrap.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/bootstrap.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/docker-daemon.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/docker-daemon.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/eni-max-pods.txt:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/eni-max-pods.txt'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/install-worker.sh:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/install-worker.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000755'
              authentication: S3Auth
            /tmp/worker/kubelet-config.json:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-config.json'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet-kubeconfig:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet-kubeconfig'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/kubelet.service:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/kubelet.service${Version}'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                  Version: !If [GreaterThan114, ".1.15", ""]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
            /tmp/worker/logrotate-kube-proxy:
              source: !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/amazon-eks/logrotate-kube-proxy'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              group: root
              owner: root
              mode: '000644'
              authentication: S3Auth
          commands:
            a-install:
              command: /tmp/worker/install-worker.sh
              env:
                BINARY_BUCKET_NAME: amazon-eks
                BINARY_BUCKET_PATH: !FindInMap
                  - K8sVersionMap
                  - !Ref KubernetesVersion
                  - BinaryPath
                BINARY_BUCKET_REGION: us-west-2
            b-bootstrap:
              command: !Sub /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments}
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !If
        - UseCustomAmi
        - !Ref CustomAmiId
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - !FindInMap
            - OStoK8sVersionMap
            - !Ref NodeAMIOS
            - !FindInMap
              - K8sVersionMap
              - !Ref KubernetesVersion
              - !FindInMap
                - InstanceTypes
                - !Ref NodeInstanceType
                - Type
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: !If [ SuseOS, /dev/sda1, /dev/xvda ]
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            set -o xtrace
            function signal() {
              $1/cfn-signal --exit-code $2 \
                --stack  ${AWS::StackName} \
                --resource NodeGroup  \
                --region ${AWS::Region}
            }
            ${ProxySetup}
            ${BootStrap}
            ${ProxyPostSetup}
            ${Signal}
          - ProxySetup: !If
              - EnableProxy
              - !Sub |
                  MAC=$(curl -s http://169.254.169.254/latest/meta-data/mac/)
                  VPCCIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks | xargs | tr ' ' ',')
                  cat <<EOF >> /etc/environment
                  HTTP_PROXY=${HttpProxy}
                  HTTPS_PROXY=${HttpProxy}
                  http_proxy=${HttpProxy}
                  https_proxy=${HttpProxy}
                  no_proxy=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  NO_PROXY=$VPCCIDR,localhost,127.0.0.1,169.254.169.254,.internal
                  EOF
                  set -a
                  source /etc/environment
              - ""
            ProxyPostSetup: !If
              - EnableProxy
              - |
                  mkdir -p /etc/systemd/system/docker.service.d
                  cat <<EOF >> /etc/systemd/system/docker.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  cat <<EOF >> /etc/systemd/system/kubelet.service.d/proxy.conf
                  [Service]
                  EnvironmentFile=/etc/environment
                  EOF
                  systemctl daemon-reload
                  systemctl enable --now --no-block docker
                  systemctl restart docker
                  systemctl restart kubelet
              - ""
            Signal: !If
              - AmznOS
              - |
                  signal /opt/aws/bin $?
              - |
                  signal /usr/bin $?
                  if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                    # Need to enable some kernel boot options and reboot
                    sed -i 's|GRUB_CMDLINE_LINUX=""|GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1" |' /etc/default/grub
                    grub2-mkconfig -o /boot/grub2/grub.cfg
                    reboot
                  fi
            BootStrap: !If
            - AmznOS
            - !Sub |
                /etc/eks/bootstrap.sh ${EKSControlPlane} ${BootstrapArguments} || signal /opt/aws/bin $1
            - !Sub |
                if [ -e /etc/os-release ] && grep SLES /etc/os-release; then
                  zypper in -y python2-setuptools
                  update-alternatives --set easy_install /usr/bin/easy_install-2.7
                fi
                easy_install https://cloudformation-examples.s3.amazonaws.com/aws-cfn-bootstrap-latest.zip
                /usr/bin/cfn-init \
                  --stack ${AWS::StackName} \
                  --resource NodeLaunchConfig \
                  --region ${AWS::Region}
  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Metadata:
      DependsOn: !If [ CleanupSGs, !Ref CleanupSecurityGroupDependencies, !Ref "AWS::NoValue" ]
    Condition: EnableManagedNodeGroup
    Properties:
      ClusterName: !Ref EKSControlPlane
      NodeRole: !Ref NodeInstanceRoleArn
      AmiType: !If [ EnableManagedNodeGroup, !Ref 'ManagedNodeGroupAMIType', !Ref "AWS::NoValue" ]
      InstanceTypes:
        - !Ref 'NodeInstanceType'
      DiskSize: !Ref NodeVolumeSize
      ScalingConfig:
        MinSize: !Ref NumberOfNodes
        DesiredSize: !Ref NumberOfNodes
        MaxSize: !If [ MaxNodes, !Ref MaxNumberOfNodes, !Ref NumberOfNodes ]
      Labels:
        Key: Name
        Value: !If [ MNGLBL, !Sub '${EKSControlPlane}-${NodeGroupName}-Node', !Ref MangedNodeGroupLabel ]
        PropagateAtLaunch: true
      Subnets: !If
      - 3AZDeployment
      - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]
      - !If
        - 2AZDeployment
        - [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID ]
        - [ !Ref PrivateSubnet1ID ]
      RemoteAccess:
        Ec2SshKey: !Ref KeyPairName
Outputs:
  EKSNodeSecurityGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref NodeSecurityGroup
      - !If [ EnableManagedNodeGroup, !Ref NodeSG, "" ]
  NodeAutoScalingGroup:
    Value: !If
      - DisableManagedNodeGroup
      - !Ref 'NodeGroup'
      - !If [ EnableManagedNodeGroup, !Ref 'EKSNodegroup', "" ]