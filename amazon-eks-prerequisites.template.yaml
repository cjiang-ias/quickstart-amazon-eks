AWSTemplateFormatVersion: "2010-09-09"
Description: Checks for Shared resources required by all Amazon EKS Quick Start stacks. (qs-1r0qgtna3)
Parameters:
  RegionalTemplateUri:
    Type: String
  AccountTemplateUri:
    Type: String
  Version:
    Type: String
Mappings:
  Config:
    Prefix: { Value: 'eks-quickstart' }
Resources:
  PreReqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'deploy-prereqs'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                - 'lambda:*'
                - 'iam:*'
                - 's3:*'
                - 'cloudformation:*'
                - 'ec2:DescribeRegions'
                Resource: '*'
  PreReqsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Checks whether the per-region and per-account EKS Quick Start stacks are present and up to date.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt PreReqsRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import traceback
          from botocore.config import Config
          from uuid import uuid4
          from random import randint
          from time import sleep
          C = Config(retries={'max_attempts': 10, 'mode': 'standard'})
          BC = boto3.client
          CFN = 'cloudformation'
          def get_stacks(key, val, region=None):
              cfn = BC(CFN, region_name=region, config=C)
              stacks = []
              for p in cfn.get_paginator('describe_stacks').paginate():
                  stacks += p['Stacks']
              s = [s for s in stacks if {'Key': key, 'Value': val} in s['Tags']]
              if not len(s):
                  return None
              stack_id = s[0]['StackId']
              status = s[0]['StackStatus']
              if status.endswith('_IN_PROGRESS'):
                  op = status.split('_')[0]
                  cfn.get_waiter(f'stack_{op}_complete').wait(StackName=stack_id)
                  return stack_id if op != 'DELETE' else None
              return s[0] if len(s) > 0 else None
          def put_stack(name, region, template_url, parameters, key, value, retries=5):
              sleep(randint(0, 1500)/100) # jitter to reduce the chance of concurrent queries racing
              if not region:
                for r in [r['RegionName'] for r in BC('ec2').describe_regions()['Regions']]:
                    acc_stack = get_stacks(key, name, r)
                    if acc_stack:
                        region = r
                        break
              stack_id = get_stacks(key, name, region)
              client = BC(CFN, region_name=region)
              args = {
                  "StackName": stack_id if stack_id else f"{key}-{value}",
                  "TemplateURL": template_url,
                  "Parameters": [{"ParameterKey": k, "ParameterValue": v} for k, v in parameters.items()],
                  "Capabilities": ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
                  "OnFailure": "DELETE",
                  "Tags": [{"Key": key, "Value": value}]
              }
              method = client.create_stack
              wait = 'create'
              if stack_id:
                  method = client.update_stack
                  wait = 'update'
                  del args['OnFailure']
              try:
                  stack_id = method(**args)['StackId']
                  client.get_waiter(f'stack_{wait}_complete').wait(StackName=stack_id)
              except Exception as e:
                  if "No updates are to be performed" in str(e):
                      print(f"No updates are to be performed for {value}.")
                  elif retries > 0:
                      put_stack(name, region, template_url, parameters, key, value, retries-1)
                  elif "Waiter encountered a terminal failure state" in str(e):
                      raise RuntimeError(f"{name} create/update failed.")
                  else:
                      raise
          def handler(event, context):
              s = cfnresponse.SUCCESS
              r = " "
              p = event.get('PhysicalResourceId', context.log_stream_name)
              props = event['ResourceProperties']
              key = props['Key']
              acc_uri = props['AccountTemplateUri']
              bucket = acc_uri.split('https://')[1].split('.')[0]
              prefix = '/'.join(acc_uri.split('/')[3:-2]) + '/'
              try:
                  if event['RequestType'] != 'Delete':
                      put_stack('AccountSharedResources', None, acc_uri, {}, key, 'AccountSharedResources')
                      params = {"QSS3BucketName": bucket, "QSS3KeyPrefix": prefix, "RandomStr": uuid4().hex}
                      put_stack('RegionalSharedResources', None, props['RegionalTemplateUri'], params, key, 'RegionalSharedResources')
              except Exception as e:
                  s = cfnresponse.FAILED
                  r = f"Unhandled Exception: {e}"
                  traceback.print_exc()
              finally:
                  cfnresponse.send(event, context, s, {}, p, reason=r)
  PreReqs:
    Type: Custom::PreReqs
    Properties:
      ServiceToken: !GetAtt 'PreReqsFunction.Arn'
      AccountTemplateUri: !Ref AccountTemplateUri
      RegionalTemplateUri: !Ref RegionalTemplateUri
      Version: !Ref Version
      Key: !FindInMap [Config, Prefix, Value]
